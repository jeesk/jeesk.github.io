"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[907],{2675:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"elasticsearch-user-rtb-ad","metadata":{"permalink":"/java/elasticsearch-user-rtb-ad","source":"@site/java/2022-02-05-elasticsearch-user-rtb-ad.md","title":"Elasticsearch \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u68c0\u7d22\u4f7f\u7528","description":"Elasticsearch \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u68c0\u7d22\u4f7f\u7528","date":"2022-02-05T00:00:00.000Z","formattedDate":"February 5, 2022","tags":[{"label":"elasticsearch","permalink":"/java/tags/elasticsearch"},{"label":"rtb-ad","permalink":"/java/tags/rtb-ad"}],"readingTime":6.215,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"elasticsearch-user-rtb-ad","title":"Elasticsearch \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u68c0\u7d22\u4f7f\u7528","tags":["elasticsearch","rtb-ad"],"authors":["jeesk"]},"nextItem":{"title":"Java BiO\u548cNIO\u7684\u533a\u522b","permalink":"/java/java-bio-diffrent-from-nio"}},"content":"## Elasticsearch \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u68c0\u7d22\u4f7f\u7528\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n###\\t \u4e00\u3001\u5e7f\u544a\u5b9a\u5411\u7b80\u8ff0\\r\\n\\r\\n####\\t1.1 \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u5b9a\u5411\u6761\u4ef6\u5f80\u5f80\u5982\u4e0b\u6240\u793a\\r\\n\\r\\n-    ad1  \u5b9a\u5411\u4e3a\u5730\u57df\u5317\u4eac,\u4e0a\u6d77,\u5e7f\u5dde,\u6df1\u5733,18~28\u5c81\u7684\u65c5\u6e38,\u5065\u8eab\u884c\u4e1a\u7537\u6027,\u5e76\u4e14\u8981\u6c42\u9002\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e3aios,android,\u5e7f\u544a\u51fa\u4ef75\u5757\\r\\n-    ad2  \u5b9a\u5411\u4e3a\u5730\u57df\u6210\u90fd\u572818~28\u5c81\u7684\u5065\u8eab\u884c\u4e1a\u7537\u6027,\u5e76\u4e14\u8981\u6c42\u9002\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e3aios\u548cmac,\u5e7f\u544a\u51fa\u4ef74.8\u5757\\r\\n-    ad3  \u5b9a\u5411\u4e3a\u572828~38\u5c81\u7684\u7537\u6027,\u5e76\u4e14\u8981\u6c42\u9002\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e3aandroid,\u5e7f\u544a\u51fa\u4ef75.7\u5757\\r\\n-    ad4  \u5b9a\u5411\u4e3a\u572828~38\u5c81,\u5e76\u4e14\u8981\u6c42\u9002\u7528\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e3aios,\u5e7f\u544a\u51fa\u4ef75.2\u5757\\r\\n\\r\\n####\\t1.2  \u89d2\u8272\u5bf9\u5e94\u5e7f\u544a\u5206\u6790\\r\\n\\r\\n -    \u89d2\u82721:     \u5317\u4eac,\u5973\u6027,\u5065\u8eab\u884c\u4e1a,\u64cd\u4f5c\u7cfb\u7edfios\\r\\n -    \u89d2\u82722:     \u5e7f\u5dde,\u7537\u6027,18~28\u5c81,\u65c5\u6e38\u884c\u4e1a,\u64cd\u4f5c\u7cfb\u7edf\u4e3aios\\r\\n -    \u89d2\u82723:     \u6210\u90fd,\u5973\u6027,28~38\u5c81,\u5065\u8eab\u884c\u4e1a,\u64cd\u4f5c\u7cfb\u7edf\u4e3aios\\r\\n -    \u89d2\u82724:     \u6210\u90fd,\u7537\u6027,28~38\u5c81,\u5065\u8eab\u884c\u4e1a,\u64cd\u4f5c\u7cfb\u7edf\u4e3aios\\r\\n\\r\\n####\\t1.3.  \u8ba4\u771f\u5206\u6790\u540e\u5f97\u51fa\u4e0b\u9762\u6bcf\u4e2a\u89d2\u8272\u53ef\u4ee5\u63a8\u9001\u7684\u5e7f\u544a\u5982\u4e0b\\r\\n\\r\\n- \u89d2\u82721:  ad4\\r\\n- \u89d2\u82722:  ad1,ad4\\r\\n- \u89d2\u82723:  ad4\\r\\n- \u89d2\u82724:  ad2,ad4\\r\\n\\r\\n\u5f80\u5f80\u4f20\u7edf\u6570\u636e\u5e93\u65e0\u6cd5\u6ee1\u8db3\u4e0a\u8ff0\u7684\u67e5\u8be2\u65f6\u5ef6, \u5927\u5382\u5f80\u5f80\u53c8\u5f00\u53d1\u81ea\u5df1\u7684\u5012\u6392\u7d22\u5f15\u7cfb\u7edf, \u4e3a\u4e86\u51cf\u5c11\u6210\u672c, \u53ef\u4ee5\u4f7f\u7528elasticsearch\u7684\u5e03\u5c14\u67e5\u8be2.\\r\\n\\r\\n### \u4e8c\u3001\u4f7f\u7528elasticsearch \u67e5\u8be2\u5b9e\u65f6\u67e5\u8be2\u5e7f\u544a\\r\\n\\r\\n#### 2.1.   mysql\u4e2d, \u5982\u679c\u8981\u67e5\u8be2\u67d0\u4e2a\u7528\u6237\u6ee1\u8db3\u7684\u5e7f\u544a\u6761\u4ef6\u5982\u4e0b\u53ef\u6574\u7406\u4e3a\u8868\u8fbe\u5f0f\\r\\n\\r\\n[\uff08\u4e0d\u5b58\u5728\u6027\u522b\u5b9a\u5411\uff09|| \uff08\u5b58\u5728\u6027\u522b\u5b9a\u5411\u4e14\u6ee1\u8db3\u6761\u4ef6\uff09]  \\r\\n&&  [\uff08\u4e0d\u5b58\u5728\u5e74\u9f84\u5b9a\u5411\uff09|| \uff08\u5b58\u5728\u5e74\u9f84\u5b9a\u5411\u4e14\u6ee1\u8db3\u6761\u4ef6\uff09]\\r\\n&&  [\uff08\u4e0d\u5b58\u5728\u6807\u7b7e\u5b9a\u5411\uff09|| \uff08\u5b58\u5728\u6807\u7b7e\u5b9a\u5411\u4e14\u6ee1\u8db3\u6761\u4ef6\uff09]\\r\\n&&  [\uff08\u4e0d\u5b58\u5728\u5730\u57df\u5b9a\u5411\uff09|| \uff08\u5b58\u5728\u5730\u57df\u5b9a\u5411\u4e14\u6ee1\u8db3\u6761\u4ef6\uff09]\\r\\n&&  [\uff08\u4e0d\u5b58\u5728\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u5411\uff09|| \uff08\u5b58\u5728\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u5411\u4e14\u6ee1\u8db3\u6761\u4ef6\uff09]\\r\\n\\r\\n####\\t2.2  \u51c6\u5907\u5de5\u5177:  postman \u6216\u8005\u652f\u6301curl\u547d\u4ee4\u884c, \u4e00\u53f0\u5b89\u88c5\u4e86docker\u7684\u673a\u5668\\r\\n\\r\\n#####\\t2.2.1\\t\u62c9\u53d6es\u955c\u50cf,\u5e76\u4e14\u8fd0\u884c\u8d77\u6765\\r\\n\\r\\n```shell\\r\\ndocker pull docker.io/elasticsearch:7.1.1\\r\\ndocker run -d --name es1  -e ES_JAVA_OPTS=\\"-Xms512m -Xmx512m\\" -p 9200:9200 -p 9300:9300 -e \\"discovery.type=single-node\\" b0e9f9f047e6\\r\\n```\\r\\n\\r\\n#####\\t2.2.2    \u6267\u884c\u547d\u4ee4\\r\\n\\r\\npostman\u6216\u8005\u547d\u4ee4\u884c\u4e2d\u6267\u884c `curl --location --request GET \'http://192.168.17.77:9200\'`\\r\\n\\r\\n\u5982\u679c\u8fd4\u56de\u4e0b\u9762\u7684\u6587\u6863\u8bf4\u660e\u4f60\u5b89\u88c5\u5355\u673a\u7248\u672c\u7684elasticsearch\u5df2\u7ecf\u5b89\u88c5\u5b8c\u6210\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"name\\": \\"cc51cc2a79ce\\",\\r\\n    \\"cluster_name\\": \\"docker-cluster\\",\\r\\n    \\"cluster_uuid\\": \\"BveCHkuVTtWwr-rcWDmTpg\\",\\r\\n    \\"version\\": {\\r\\n        \\"number\\": \\"7.1.1\\",\\r\\n        \\"build_flavor\\": \\"default\\",\\r\\n        \\"build_type\\": \\"docker\\",\\r\\n        \\"build_hash\\": \\"7a013de\\",\\r\\n        \\"build_date\\": \\"2019-05-23T14:04:00.380842Z\\",\\r\\n        \\"build_snapshot\\": false,\\r\\n        \\"lucene_version\\": \\"8.0.0\\",\\r\\n        \\"minimum_wire_compatibility_version\\": \\"6.8.0\\",\\r\\n        \\"minimum_index_compatibility_version\\": \\"6.0.0-beta1\\"\\r\\n    },\\r\\n    \\"tagline\\": \\"You Know, for Search\\"\\r\\n}\\r\\n```\\r\\n\\r\\n####\\t2.3.  \u5efa\u7acb\u5e7f\u544a\u7d22\u5f15,\u67e5\u8be2\u5e7f\u544a\u4f4d\u5bf9\u5e94\u5e7f\u544a\\r\\n\\r\\n\u901a\u5e38\u7528\u6237\u8bbf\u95eeapp\u62c9\u53d6\u5e7f\u544a\u662f\u4ee5\u5e7f\u544a\u4f4d\u4e3a\u57fa\u51c6, \u8be5\u5e7f\u544a\u4f4d\u4e0b\u9762\u6709n\u4e2a\u5e26\u6709\u5b9a\u5411\u6761\u4ef6\u7684\u5e7f\u544a.\u90a3\u4e48 \u67e5\u8be2\u6761\u4ef6\u5c31\u662f\u5e7f\u544a\u4f4did,\u5e95\u4ef7+\u4ee5\u53ca\u7528\u6237\u81ea\u8eab\u7684\u5c5e\u6027\\r\\n\\r\\n\u521b\u5efa\u5e7f\u544a\u4f4did\u4e3a100\u7684\u7d22\u5f15\\r\\n\\r\\n`curl --location --request PUT \'http://192.168.17.77:9200/posfor100\'`\\r\\n\\r\\n1. \u589e\u52a0\u8be5\u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u636e(\u7c7b\u578b\u4e8emysql\u7684\u884c\u6570\u636e)\\r\\n\\r\\n```\\r\\n\u5317\u4e0a\u5e7f\u6df1,\u6210\u90fd\u5206\u522b\u6620\u5c04\u4e3a 1,2,3,4,5\\r\\n\u7537\u5973\u6620\u5c04\u4e3a1,2\\r\\n\u64cd\u4f5c\u7cfb\u7edfios, android,mac \u6620\u5c04\u4e3a1,2,3  \\r\\n\u884c\u4e1a\u65c5\u6e38,\u5065\u8eab\u5206\u522b\u6620\u5c04\u4e3a 1,2 \\r\\n\u5e74\u9f8418~28 \u6620\u5c04\u4e3a2\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n\u63d2\u5165\u5bf9\u5e94\u76844\u6761\u6570\u636e,\u5047\u8bbe\u4e0a\u97624\u4e2a\u5e7f\u544a\u5bf9\u5e94\u7684id\u4e3a 101,102,103,104\\r\\n\\r\\n```json\\r\\ncurl --location --request POST \'http://192.168.17.77:9200/posfor100/_doc/101\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"city\\":[1,2,3,4],\\"ageRange\\":[2],\\"gender\\":[1],\\"os\\":[1,2],\\"industry\\":[1,2],\\"price\\":5}\'\\r\\n```\\r\\n\\r\\n```json\\r\\ncurl --location --request POST \'http://192.168.17.77:9200/posfor100/_doc/102\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"city\\":[5],\\"ageRange\\":[2],\\"gender\\":[1],\\"os\\":[1,3],\\"industry\\":[2],\\"price\\":4.8}\'\\r\\n```\\r\\n\\r\\n```json\\r\\ncurl --location --request POST \'http://192.168.17.77:9200/posfor100/_doc/103\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"ageRange\\":[2],\\"gender\\":[1],\\"os\\":[2],\\"price\\":5.7}\'\\r\\n```\\r\\n\\r\\n```json\\r\\ncurl --location --request POST \'http://192.168.17.77:9200/posfor100/_doc/104\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"ageRange\\":[2],\\"os\\":[1],\\"price\\":5.2}\'\\r\\n```\\r\\n\\r\\n1. \u5047\u8bbe\u8be5\u5e7f\u544a\u4f4d100\u7684\u5e95\u4ef7\u4e3a3\u5757\u94b1,\u4f7f\u7528\u5e03\u5c14\u67e5\u8be2\\r\\n\\r\\n\u89d2\u82721 \u5bf9\u5e94\u7684\u67e5\u8be2\\r\\n\\r\\n```shell\\r\\ncurl --location --request GET \'http://192.168.17.77:9200/posfor100/_search\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"query\\":{\\"bool\\":{\\"filter\\":[{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"gender\\":{\\"value\\":2,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"gender\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"os\\":{\\"value\\":1,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"os\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"city\\":{\\"value\\":1,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"city\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"industry\\":{\\"value\\":2,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"industry\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"ageRange\\":{\\"value\\":2,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"ageRange\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"filter\\":[{\\"range\\":{\\"price\\":{\\"from\\":3.0,\\"to\\":null,\\"include_lower\\":true,\\"include_upper\\":true,\\"boost\\":1.0}}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}}\'\\r\\n```\\r\\n\\r\\n\u5f97\u5230\u67e5\u8be2\u6761\u4ef6\u5982\u4e0b, \u83b7\u5f97\u4e86id 104\u7684\u5e7f\u544a,\u5373\u662f\u5e7f\u544a4\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"took\\": 403,\\r\\n    \\"timed_out\\": false,\\r\\n    \\"_shards\\": {\\r\\n        \\"total\\": 1,\\r\\n        \\"successful\\": 1,\\r\\n        \\"skipped\\": 0,\\r\\n        \\"failed\\": 0\\r\\n    },\\r\\n    \\"hits\\": {\\r\\n        \\"total\\": {\\r\\n            \\"value\\": 1,\\r\\n            \\"relation\\": \\"eq\\"\\r\\n        },\\r\\n        \\"max_score\\": 0.0,\\r\\n        \\"hits\\": [\\r\\n            {\\r\\n                \\"_index\\": \\"posfor100\\",\\r\\n                \\"_type\\": \\"_doc\\",\\r\\n                \\"_id\\": \\"104\\",\\r\\n                \\"_score\\": 0.0,\\r\\n                \\"_source\\": {\\r\\n                    \\"ageRange\\": [\\r\\n                        2\\r\\n                    ],\\r\\n                    \\"os\\": [\\r\\n                        1\\r\\n                    ],\\r\\n                    \\"price\\": 5.2\\r\\n                }\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\u89d2\u82722\u5bf9\u5e94\u7684\u67e5\u8be2\\r\\n\\r\\n```shell\\r\\ncurl --location --request GET \'http://192.168.17.77:9200/posfor100/_search\' \\\\\\r\\n--header \'Content-Type: application/json\' \\\\\\r\\n--data-raw \'{\\"query\\":{\\"bool\\":{\\"filter\\":[{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"gender\\":{\\"value\\":1,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"gender\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"os\\":{\\"value\\":1,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"os\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"city\\":{\\"value\\":4,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"city\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"industry\\":{\\"value\\":1,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"industry\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"should\\":[{\\"term\\":{\\"ageRange\\":{\\"value\\":2,\\"boost\\":1.0}}},{\\"bool\\":{\\"must_not\\":[{\\"exists\\":{\\"field\\":\\"ageRange\\",\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"minimum_should_match\\":\\"1\\",\\"boost\\":1.0}},{\\"bool\\":{\\"filter\\":[{\\"range\\":{\\"price\\":{\\"from\\":3.0,\\"to\\":null,\\"include_lower\\":true,\\"include_upper\\":true,\\"boost\\":1.0}}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}],\\"adjust_pure_negative\\":true,\\"boost\\":1.0}}}\'\\r\\n```\\r\\n\\r\\n\u5f97\u5230\u7684\u7ed3\u679c\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"took\\": 3,\\r\\n    \\"timed_out\\": false,\\r\\n    \\"_shards\\": {\\r\\n        \\"total\\": 1,\\r\\n        \\"successful\\": 1,\\r\\n        \\"skipped\\": 0,\\r\\n        \\"failed\\": 0\\r\\n    },\\r\\n    \\"hits\\": {\\r\\n        \\"total\\": {\\r\\n            \\"value\\": 2,\\r\\n            \\"relation\\": \\"eq\\"\\r\\n        },\\r\\n        \\"max_score\\": 0.0,\\r\\n        \\"hits\\": [\\r\\n            {\\r\\n                \\"_index\\": \\"posfor100\\",\\r\\n                \\"_type\\": \\"_doc\\",\\r\\n                \\"_id\\": \\"101\\",\\r\\n                \\"_score\\": 0.0,\\r\\n                \\"_source\\": {\\r\\n                    \\"city\\": [\\r\\n                        1,\\r\\n                        2,\\r\\n                        3,\\r\\n                        4\\r\\n                    ],\\r\\n                    \\"ageRange\\": [\\r\\n                        2\\r\\n                    ],\\r\\n                    \\"gender\\": [\\r\\n                        1\\r\\n                    ],\\r\\n                    \\"os\\": [\\r\\n                        1,\\r\\n                        2\\r\\n                    ],\\r\\n                    \\"industry\\": [\\r\\n                        1,\\r\\n                        2\\r\\n                    ],\\r\\n                    \\"price\\": 5\\r\\n                }\\r\\n            },\\r\\n            {\\r\\n                \\"_index\\": \\"posfor100\\",\\r\\n                \\"_type\\": \\"_doc\\",\\r\\n                \\"_id\\": \\"104\\",\\r\\n                \\"_score\\": 0.0,\\r\\n                \\"_source\\": {\\r\\n                    \\"ageRange\\": [\\r\\n                        2\\r\\n                    ],\\r\\n                    \\"os\\": [\\r\\n                        1\\r\\n                    ],\\r\\n                    \\"price\\": 5.2\\r\\n                }\\r\\n            }\\r\\n        ]\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n\u7531\u4e0a\u53ef\u5f97\u89d2\u82721\u83b7\u53d6\u5230ad4,\u89d2\u82722\u83b7\u53d6\u5230ad1,ad4, \u548c\u6211\u4eec\u6700\u521d\u5f97\u5230\u7684\u7ed3\u8bba\u662f\u4e00\u6837\u76842,  \u5269\u4f59\u89d2\u82723,\u89d2\u82724\u5bf9\u5e94\u7684\u5e7f\u544a,\u8bf7\u5404\u4f4d\u4eb2\u81ea\u5df1\u52a8\u624b\u9a8c\u8bc1.  \\r\\n\\r\\n###\\t\u4e09\u3001\u5c0f\u7ed3\\r\\n\\r\\n1. \u5408\u7406\u4f7f\u7528term\u548cprefix\u641c\u7d22\u53ef\u4ee5\u7cbe\u51c6\u7684\u627e\u51fa\u590d\u5408\u5b9a\u5411\u6761\u4ef6\u7684\u6570\u636e\uff0c \u8fd9\u5bf9\u4e8e\u5927\u6570\u636e\u5339\u914d\u6765\u8bf4\u76f8\u5f53\u597d\u7528\u3002 \\r\\n\\r\\n   \\r\\n\\r\\n\u53c2\u8003\u5982\u4e0b\\r\\n\\r\\n1. [\u57fa\u4e8e\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684\u5e7f\u544a\u7d22\u5f15\u8bbe\u8ba1](https://zhuanlan.zhihu.com/p/59658727)\\r\\n2. [Elasticsearch\uff08Es\uff09\u805a\u5408\u67e5\u8be2\uff08\u6307\u6807\u805a\u5408\u3001\u6876\u805a\u5408\uff09](https://www.knowledgedict.com/tutorial/elasticsearch-aggregations.html)"},{"id":"java-bio-diffrent-from-nio","metadata":{"permalink":"/java/java-bio-diffrent-from-nio","source":"@site/java/2022-01-23-java-bio-diffrent-from-nio.md","title":"Java BiO\u548cNIO\u7684\u533a\u522b","description":"NIO\u548cBIO\u7684\u533a\u522b\u603b\u7ed3","date":"2022-01-23T00:00:00.000Z","formattedDate":"January 23, 2022","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"io","permalink":"/java/tags/io"}],"readingTime":6.705,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"java-bio-diffrent-from-nio","title":"Java BiO\u548cNIO\u7684\u533a\u522b","authors":["jeesk"],"tags":["java","io"]},"prevItem":{"title":"Elasticsearch \u5728\u7ade\u4ef7\u5e7f\u544a\u4e2d\u7684\u68c0\u7d22\u4f7f\u7528","permalink":"/java/elasticsearch-user-rtb-ad"},"nextItem":{"title":"Spring-boot \u6574\u5408flink \u6559\u7a0b","permalink":"/java/spring-boot-mercy-flink"}},"content":"##\\t\\tNIO\u548cBIO\u7684\u533a\u522b\u603b\u7ed3\\n\\n###\\t1. \u8868\u683c\u8bf4\u660e\u4e24\u8005\u7684\u533a\u522b\\n\\n| IO\u7c7b\u578b | \u662f\u5426\u963b\u585e | \u540c\u6b65IO | \u7ebf\u7a0b\u6a21\u578b                 |\\n| ------ | -------- | ------ | ------------------------ |\\n| BIO    | \u963b\u585e     | \u662f     | \u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u8bf7\u6c42     |\\n| NIO    | \u975e\u963b\u585e   | \u662f     | \u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5904\u7406\u591a\u4e2a\u8bf7\u6c42 |\\n\\n###\\t2. \u793a\u610f\u56fe\u8bf4\u660e\u533a\u522b\\n\\n![](./2022-01-23-java-bio-diffrent-from-nio.assets\\\\image-20220124015657528.png)\\n\\n![image-20220124015747188](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124015747188.png)\\n\\n\\n\\n##\\t\u4ee3\u7801\u5b9e\u6218\\n\\n\\n\\n###\\t1. BIO\u5b9e\u6218\\n\\n####\\t1.1 \u7f16\u5199BIO\u4ee3\u7801\\n\\n> \u200b\\t\u76ee\u7684:  \u5b9e\u73b0\u4e00\u4e2aserver, \u63a5\u53d7\u5ba2\u6237\u7aef\u53d1\u9001\u6765\u7684\u6d88\u606f, \u5e76\u5c06\u6d88\u606f\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\\n>\\n> \u200b    \u601d\u8def:\\n>\\n>  1.\\t\u9996\u5148\u521b\u5efa\u4e00\u4e2aServerSocket , \u5e76\u4e14\u7ed1\u5b9a\u4e00\u4e2a\u672c\u5730\u7aef\u53e39999,\\n>  2.\\t \u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5, \u7136\u540e\u5c06\u8fde\u63a5\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u5904\u7406\\n>  3.\\t \u4eceinputStream \u91cc\u9762\u8bfb\u53d6\u5185\u5bb9, \u5e76\u4e14\u5c06\u5185\u5bb9\u4f7f\u7528outPutStream\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\\n\\n```java\\nimport java.io.IOException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.net.InetSocketAddress;\\nimport java.net.ServerSocket;\\nimport java.net.Socket;\\nimport java.util.concurrent.ExecutorService;\\nimport java.util.concurrent.Executors;\\n\\npublic class BioServerTest {\\n    public static void main(String[] args) throws IOException {\\n\\n        // \u56fa\u5b9a10\u4e2a\u7ebf\u7a0b,\u5e76\u4e14\u521b\u5efa\u7ed9\u4e00\u4e2aserverSocket,\u5e76\u4e14\u7ed1\u5b9a\u7aef\u53e3\\n        ExecutorService executorService = Executors.newFixedThreadPool(14);\\n        ServerSocket serverSocket = new ServerSocket();\\n        serverSocket.bind(new InetSocketAddress(9999));\\n\\n        // \u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42, \u5e76\u5c06\u5ba2\u6237\u7aef\u53d1\u9001\u6765\u7684\u6587\u5b57, \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\\n        while (true) {\\n            // \u7b49\u5f85\u5176\u5b83\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42, \u8bb0\u4f4f\u8fd9\u91cc\u963b\u585e\u7684,  \u5f53\u6211\u4eec\u542f\u52a8\u8be5\u7a0b\u5e8f, \u8fd9\u91cc\u7684accept \u4f1a\u963b\u585e\u4e0d\u52a8, \u76f4\u5230\u6210\u529f\u63a5\u6536\u4e00\u4e2a\u8bf7\u6c42\\n            Socket accept = serverSocket.accept();\\n            System.out.println(\\"\u63a5\u53d7\u5230\u8bf7\u6c42\\");\\n            // \u5c06\u8bf7\u6c42\u4ea4\u7ed9\u7ebf\u7a0b\u6c60\u5904\u7406\\n            executorService.submit(new Runnable() {\\n                @Override\\n                public void run() {\\n                    InputStream inputStream = null;\\n                    OutputStream outputStream = null;\\n                    // \u4e0d\u540c\u8fde\u63a5\u7684hashcode , \u8bf4\u660e\u662f\u6765\u81ea\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\\n                    int clientHashCode = accept.hashCode();\\n                    try {\\n                        inputStream = accept.getInputStream();\\n                        outputStream = accept.getOutputStream();\\n                        byte[] bytes = new byte[1024];\\n                        int index = inputStream.read(bytes);\\n                        String s = new String(bytes, 0, index);\\n                        System.out.println(\\"\u5ba2\u6237\u7aef:\\" + clientHashCode + \\",\u53d1\u9001\u6765\u7684\u6d88\u606f\u662f:\\" + s);\\n                        outputStream.write((\\"server\u56de\u590d: \\" + s).getBytes());\\n                    } catch (IOException e) {\\n                        e.printStackTrace();\\n                    } finally {\\n                        try {\\n                            accept.close();\\n                        } catch (IOException e) {\\n                            e.printStackTrace();\\n                        }\\n                    }\\n                }\\n            });\\n        }\\n\\n    }\\n}\\n\\n```\\n\\n####\\t1.2 \u542f\u52a8\u7a0b\u5e8f\\n\\n![image-20220124023401519](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124023401519.png)\\n\\n####\\t1.3\\t\u5728\u547d\u4ee4\u884c\u4e2d\u8fde\u63a5\u5ba2\u6237\u7aef, \u89c2\u5bdf\u7ed3\u679c\\n\\n![image-20220124023544496](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124023544496.png)\\n\\n\u8f93\u5165hello world ,\u671f\u5f85\u7ed3\u679c\u8fd4\u56dehello world\\n\\n![image-20220124023633274](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124023633274.png)\\n\\nidea \u670d\u52a1\u7aef\u7684console \u5982\u4e0b\\n\\n![image-20220124023653403](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124023653403.png)\\n\\n###\\t2. NIO\u5b9e\u6218\\n\\n####\\t\\n\\n> \u200b\\t\u76ee\u7684:  \u901a\u8fc7NIO \u5b9e\u73b0client\u548cserver\u7684\u4ea4\u4e92\\n>\\n> \u200b    \u601d\u8def:\\n>\\n> \u200b    Server \u7aef\u601d\u8def\\n>\\n> 1.  \u9996\u5148\u521b\u5efasocketServerChannel,\u548cSelctor, \u5c06channel \u6ce8\u518cselector \u4e0a\u9762\u53bb\\n>\\n> 2.  \u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5, \u5c06\u5ba2\u6237\u7aef\u8fde\u63a5\u7684channel\u6ce8\u518c\u5230selctor\u4e0a\u9762\u53bb, \u6ce8\u610f\u4e0d\u540c\u7684channel\u6709\u4e0d\u540c\u7684\u4e8b\u4ef6\\n>\\n> 3.  \u83b7\u53d6\u83b7\u53d6\u5ba2\u6237\u7aefchannel\u62ff\u5230\u6570\u636e\\n>\\n>\\n>\\n> \u200b    Client \u7aef\u601d\u8def\\n>\\n> 1.\\t\u521b\u5efaSocketChannel, \u7136\u540e\u8fde\u63a5Server\u7aef\\n> 2.\\t\u5f53\u8fde\u63a5\u5b8c\u6210\u540e, \u5411Server\u7aef\u53d1\u9001\u6d88\u606f\\n\\n####\\t2.1 \u7f16\u5199NIO\u4ee3\u7801\\n\\n#####\\t\\t2.2.1 Server\u7aef\u4ee3\u7801\\n\\n```java\\nimport java.io.IOException;\\nimport java.net.InetSocketAddress;\\nimport java.nio.ByteBuffer;\\nimport java.nio.channels.SelectionKey;\\nimport java.nio.channels.Selector;\\nimport java.nio.channels.ServerSocketChannel;\\nimport java.nio.channels.SocketChannel;\\nimport java.util.Iterator;\\n\\npublic class NIOServerDemo {\\n    public static void main(String[] args) throws IOException {\\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\\n        serverSocketChannel.configureBlocking(false);\\n        Selector selector = Selector.open();\\n        serverSocketChannel.bind(new InetSocketAddress(9999));\\n        // \u5c06serverSocketChannel\u7684\u53ef\u63a5\u53d7\u4e8b\u4ef6\u6ce8\u518c\u5230selector\u4e0a\u9762,\\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\\n        while (true) {\\n            int resultCode = selector.select(1000);\\n            if (resultCode == 0) {\\n                System.out.println(\\"\u670d\u52a1\u5668\u7b49\u5f85\u54271s, \u65e0\u8fde\u63a5\\");\\n                continue;\\n            }\\n            Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\\n            while (iterator.hasNext()) {\\n                try {\\n                    SelectionKey selectionKey = iterator.next();\\n                    // \u5f53\u524d\u4e8b\u4ef6\u662f\u5426\u53ef\u63a5\u53d7\\n                    if (selectionKey.isAcceptable()) {\\n                        System.out.println(\\"client \u8fde\u63a5\u6210\u529f\\" + serverSocketChannel.hashCode());\\n                        // \u62ff\u5230\u63a5\u53d7\u7684socketChannel,\u5c06\u5ba2\u6237\u7aefchannel\u7684read\u4e8b\u4ef6\u6ce8\u518c\u5230selector\u4e0a\u9762\u53bb\\n                        SocketChannel socketChannel = serverSocketChannel.accept();\\n                        socketChannel.configureBlocking(false);\\n                        socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(1024));\\n                    }\\n                    // \u5f53\u524d\u4e8b\u4ef6\u662f\u5426\u662f\u53ef\u8bfb\u4e8b\u4ef6\\n                    if (selectionKey.isReadable()) {\\n                        // \u4ecechannel\u62ff\u5230\u6d88\u606f, \u5e76\u4e14\u8bfb\u53d6\u51fa\u6765\\n                        SocketChannel channel = (SocketChannel) selectionKey.channel();\\n                        ByteBuffer attachment = (ByteBuffer) selectionKey.attachment();\\n                        channel.read(attachment);\\n                        System.out.println(\\"\u53d7\u5230\u5ba2\u6237\u7aef\u4fe1\u606f:\\" + new String(attachment.array()));\\n                    }\\n                } catch (Exception e) {\\n                    System.out.println(e);\\n                } finally {\\n                    // \u6700\u597d\u522b\u5fd8\u4e86\u79fb\u51fakey\\n                    iterator.remove();\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n```\\n\\n#####\\t2.2.2 Client\u7aef\u4ee3\u7801\\n\\n```java\\nimport java.net.InetSocketAddress;\\nimport java.nio.ByteBuffer;\\nimport java.nio.channels.SocketChannel;\\nimport java.nio.charset.StandardCharsets;\\n\\n/**\\n * socket clilent \u8fde\u63a5server\\n */\\npublic class NIOClientDemo {\\n    public static void main(String[] args) throws Exception {\\n\\n        // \u521b\u5efaSocketChannel, \u5e76\u4e14\u8fde\u63a5\u672c\u57309999 \u7aef\u53e3\\n        SocketChannel socketChannel = SocketChannel.open();\\n        InetSocketAddress inetSocketAddress = new InetSocketAddress(\\"192.168.31.31\\", 9999);\\n        socketChannel.configureBlocking(false);\\n        if (!socketChannel.connect(inetSocketAddress)) {\\n            while (!socketChannel.finishConnect()) {\\n                System.out.println(\\"\u8fde\u63a5\u9700\u8981\u65f6\u95f4\\");\\n            }\\n        }\\n        System.out.println(\\"\u8fde\u63a5server\u6210\u529f\\");\\n        // \u53d1server\u7aef\u53d1\u9001\u6d88\u606f\\n        String str = \\"hello world\\";\\n        ByteBuffer wrap = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));\\n        int write = socketChannel.write(wrap);\\n        // \u6302\u8d77\u7a0b\u5e8f\\n        System.in.read();\\n    }\\n}\\n\\n```\\n\\n\\n\\n####\\t2.2\\t\u542f\u52a8\u7a0b\u5e8f\\n\\n\u542f\u52a8Server\\n\\n![image-20220124071414769](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124071414769.png)\\n\\n\u542f\u52a8Client\\n\\n![image-20220124071513381](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124071513381.png)\\n\\n##### 2.3\\t\u63a7\u5236\u53f0\u89c2\u5bdf\u7ed3\u679c\\n\\n\u671f\u671bServer\u7aef\u6536\u5230 Client \u7aef\u7684\u6d88\u606f\\n\\n![image-20220124071559323](./2022-01-23-java-bio-diffrent-from-nio.assets/image-20220124071559323.png)\\n\\n##\\t\u603b\u7ed3\\n\\n1.  \u901a\u8fc7\u7f16\u5199BIO \u548cNIO\u7684\u4ee3\u7801\u53ef\u4ee5\u5f97\u51fa, BIO\u662f\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42, \u4f46\u662fNIO\u53ef\u4ee5\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\u3002NIO\u662f\u901a\u8fc7\u5c06selector\u7684\u4e8b\u4ef6\u6ce8\u518c\u5230channel\u4e0a\u9762, \u7136\u540e\u8f6e\u8be2\u5bf9\u5e94\u7684key,\u5904\u7406\u4e0d\u540c\u7684\u4e8b\u4ef6. \u4e00\u4e2a\u8fde\u63a5\u4f7f\u7528\u4e00\u4e2aselect\u7ebf\u7a0b\u5c31\u89e3\u51b3\u4e86\u3002\\n2.  \u5728\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u4e0b\u9762\uff0c1000\u4e2a\u8fde\u63a5\u9700\u89811000\u4e2a\u7ebf\u7a0b\u624d\u80fd\u8fde\u63a5\u3002\u800cBIO \u4e00\u822c\u60c5\u51b5\u4e0b\u9762\u4f7f\u7528 \uff082* cpu\u6838\uff09+2\u5373\u53ef\uff0c\u8fd9\u662f\u56e0\u4e3aNIO \u662f\u975e\u963b\u585e\u7684\uff0c\u4e0d\u5fc5\u7b49\u5f85\\n    io\u963b\u585e\uff0c\u53ea\u6709\u5f53\u5199\u4e8b\u4ef6\u6765\u7684\u65f6\u5019\u624d\u4f1a\u5904\u7406\u3002\u663e\u7136NIO\u5728\u4f7f\u7528\u5c11\u6570\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u5bf9CPU\u65f6\u95f4\u7247\u7ade\u4e89\u8f83\u5c0f\uff0c\u540c\u65f6\u5185\u5b58\u7684\u5360\u7528\u4e5f\u8f83\u5c0f\uff0c\u968f\u7740\u793e\u533a\u7684Wubflux\u7684\u63a8\u8fdb\uff0c\u5728\u5168\u5f02\u6b65\u7684\u60c5\u51b5\u4e0b\u9762\\n    Webflux\u80fd\u591f\u5145\u5206\u5229\u7528\u591a\u6838CPU\u5904\u7406\u4e8b\u4ef6\uff0c\u63d0\u5347\u5e76\u53d1\u91cf\u548c\u541e\u5410\u91cf\u3002\u5728\u63a5\u53e3\u8017\u65f6\u56fa\u5b9aIO\u65f6\u95f4\u56fa\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0cNIO\u867d\u7136\u4e0d\u80fd\u63d0\u5347\u63a5\u53e3\u54cd\u5e94\u901f\u5ea6\uff0c\u4f46BIO\u7684\u7ade\u4e89\u76f8\u5bf9\u6765\u8bf4\u66f4\u52a0\u6fc0\u70c8\uff0c\u63a5\u53e3\u8017\u65f6\u6ce2\u52a8\u5e45\u5ea6\u5f88\u5927\uff0c\\n    NIO\u7684\u5904\u7406\u65f6\u95f4\u76f8\u5bf9\u6765\u8bf4\u66f4\u52a0\u5e73\u7a33\uff0c\u5e76\u4e14\u541e\u5410\u91cf\u662f\u8fdc\u8fdc\u4f18\u4e8eBIO\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u793e\u533a\u8d8a\u6765\u8d8a\u63a8\u8350Webflux\u7684\u539f\u56e0\u3002\u4e5f\u53ef\u4ee5\u53c2\u8003\u6211\u5148\u524d\u505a\u8fc7\u7684\u4e00\u6b21\u538b\u529b\u6d4b\u8bd5\u3002"},{"id":"spring-boot-mercy-flink","metadata":{"permalink":"/java/spring-boot-mercy-flink","source":"@site/java/2021-01-12-spring-boot-mercy-flink.md","title":"Spring-boot \u6574\u5408flink \u6559\u7a0b","description":"Flink\u6846\u67b6\uff1aFlink\u6574\u5408springboot","date":"2021-01-12T00:00:00.000Z","formattedDate":"January 12, 2021","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"spring-boot","permalink":"/java/tags/spring-boot"},{"label":"flink","permalink":"/java/tags/flink"}],"readingTime":3.125,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"spring-boot-mercy-flink","title":"Spring-boot \u6574\u5408flink \u6559\u7a0b","authors":["jeesk"],"tags":["java","spring-boot","flink"]},"prevItem":{"title":"Java BiO\u548cNIO\u7684\u533a\u522b","permalink":"/java/java-bio-diffrent-from-nio"},"nextItem":{"title":"JAVA \u5e38\u89c1\u65e5\u5fd7\u4f9d\u8d56\u5904\u7406\u7ec6\u8282","permalink":"/java/java-log-adapter-study"}},"content":"##\\tFlink\u6846\u67b6\uff1aFlink\u6574\u5408springboot\\r\\n\\r\\n> \u9996\u5148\u8bf4\u4e00\u4e0b\uff0c \u4e3a\u4ec0\u4e48flink \u9700\u8981\u96c6\u6210flink\uff0c spring boot\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u66f4\u597d\u7684\u6846\u67b6\u6574\u5408\uff0c \u540c\u65f6\u4f7f\u7528spring\u7684DI\u548cIOC\uff0c\u80fd\u66f4\u597d\u7684\u4f7f\u7528bean\uff0c\u5f53\u7136\u76f4\u63a5\u4f7f\u7528spring \u6574\u5408\u4e5f\u662f\u4e00\u6837\u3002\u540e\u6765\u6211\u4eec\u4f7f\u7528\u4e86google guice \u6765\u6574\u5408\u3002\\r\\n\\r\\n\\r\\n\\r\\n####\\t1. \u5b9e\u73b0\u539f\u7406\\r\\n\\r\\n\u5b9e\u73b0\u539f\u7406\uff0c spring \u7684\u542f\u52a8 \u4e00\u822c\u4f7f\u7528 `AnnotationConfigApplicationContext ac =  new AnnotationConfigApplicationContext(AppConfig.class);`   \u5373\u53ef\u542f\u52a8spring \u5bb9\u5668\uff0c \u5bf9\u4e48spring boot \u5462\uff0c \u770b\u8fc7\u6e90\u7801\u7684\u4eba\u6216\u8bb8\u77e5\u9053\\r\\n\\r\\n`SpringApplication.run(arge);`  \u53ea\u9700\u8981\u5728\u542f\u52a8flink\u4e4b\u524d\u542f\u52a8sping boot \u5373\u53ef\u3002\\r\\n\\r\\n\\r\\n\\r\\n####\\t2. \u4ee3\u7801\u5b9e\u6218\\r\\n\\r\\n> flink \u6574\u5408spring boot \u4ee5\u53caredission, \u5e76\u5c06\u4e8b\u4ef6\u7684id\u653e\u5165redis \u4e2d\uff0c \u4ee3\u7801\u5e93  https://gitee.com/imomoda/flink-sprint-boot\\r\\n\\r\\n#####\\t1.\\tspring boot \u542f\u52a8\u5de5\u5177\u7c7b\\r\\n\\r\\n```java\\r\\n@SpringBootApplication(scanBasePackages = {\\"io.github.jeesk.flink\\"})\\r\\n@Import(SpringUtil.class)\\r\\n@Slf4j\\r\\n@EnableConfigurationProperties({RedissonProperties.class, RedisProperties.class})\\r\\npublic class SpringBootApplicationUtil {\\r\\n\\r\\n\\r\\n    static SpringApplication springBootApplication = null;\\r\\n    static SpringApplicationBuilder springApplicationBuilder = null;\\r\\n\\r\\n    public static synchronized void run(String[] arge) {\\r\\n        if (springBootApplication == null) {\\r\\n            StandardEnvironment standardEnvironment = new StandardEnvironment();\\r\\n            MutablePropertySources propertySources = standardEnvironment.getPropertySources();\\r\\n            propertySources.addFirst(new SimpleCommandLinePropertySource(arge));\\r\\n            String startJarPath = SpringBootApplicationUtil.class.getResource(\\"/\\").getPath().split(\\"!\\")[0];\\r\\n            String[] activeProfiles = standardEnvironment.getActiveProfiles();\\r\\n            propertySources.addLast(new MapPropertySource(\\"systemProperties\\", standardEnvironment.getSystemProperties()));\\r\\n            propertySources.addLast(new SystemEnvironmentPropertySource(\\"systemEnvironment\\", standardEnvironment.getSystemEnvironment()));\\r\\n            if (springBootApplication == null) {\\r\\n                springApplicationBuilder = new SpringApplicationBuilder(SpringBootApplicationUtil.class);\\r\\n                // \u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u4f20\u5165\\r\\n                springApplicationBuilder.profiles(\\"dev\\");\\r\\n                springApplicationBuilder.sources(SpringBootApplicationUtil.class).web(WebApplicationType.NONE);\\r\\n            }\\r\\n            springBootApplication = springApplicationBuilder.build();\\r\\n            springBootApplication.run(arge);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n```\\r\\n\\r\\n##### \\t2.\\tflink job\\r\\n\\r\\n```java\\r\\npackage io.github.jeesk.flink;\\r\\n\\r\\nimport cn.hutool.extra.spring.SpringUtil;\\r\\nimport io.github.jeesk.flink.config.SpringBootApplicationUtil;\\r\\nimport org.apache.flink.configuration.Configuration;\\r\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\r\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\r\\nimport org.apache.flink.streaming.api.functions.KeyedProcessFunction;\\r\\nimport org.apache.flink.util.Collector;\\r\\nimport org.apache.flink.walkthrough.common.entity.Alert;\\r\\nimport org.apache.flink.walkthrough.common.entity.Transaction;\\r\\nimport org.apache.flink.walkthrough.common.sink.AlertSink;\\r\\nimport org.apache.flink.walkthrough.common.source.TransactionSource;\\r\\nimport org.springframework.data.redis.core.StringRedisTemplate;\\r\\n\\r\\npublic class FraudDetectionJob {\\r\\n    public static void main(String[] args) throws Exception {\\r\\n\\r\\n        Configuration configuration = new Configuration();\\r\\n        if (args != null) {\\r\\n            configuration.setString(\\"args\\", String.join(\\" \\", args));\\r\\n        }\\r\\n        SpringBootApplicationUtil.run(args);\\r\\n\\r\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\r\\n\\r\\n        DataStream<Transaction> transactions = env\\r\\n                .addSource(new TransactionSource())\\r\\n                .name(\\"transactions\\");\\r\\n\\r\\n        DataStream<Alert> alerts = transactions\\r\\n                .keyBy(Transaction::getAccountId)\\r\\n                .process(new FraudDetector())\\r\\n                .name(\\"fraud-detector\\");\\r\\n\\r\\n        alerts\\r\\n                .addSink(new AlertSink())\\r\\n                .name(\\"send-alerts\\");\\r\\n\\r\\n        env.execute(\\"Fraud Detection\\");\\r\\n    }\\r\\n\\r\\n    static public class FraudDetector extends KeyedProcessFunction<Long, Transaction, Alert> {\\r\\n\\r\\n        private StringRedisTemplate redisTemplate = null;\\r\\n\\r\\n        @Override\\r\\n        public void open(Configuration parameters) throws Exception {\\r\\n            // \u521d\u59cb\u5316bean\\r\\n            super.open(parameters);\\r\\n            SpringBootApplicationUtil.run(parameters.getString(\\"arge\\", \\"\\").split(\\" \\"));\\r\\n            redisTemplate = SpringUtil.getBean(StringRedisTemplate.class);\\r\\n\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        public void processElement(\\r\\n                Transaction transaction,\\r\\n                Context context,\\r\\n                Collector<Alert> collector) throws Exception {\\r\\n\\r\\n            Alert alert = new Alert();\\r\\n            alert.setId(transaction.getAccountId());\\r\\n            // \u5c06id \u653e\u5165redis \u4e2d\\r\\n            redisTemplate.opsForSet().add(\\"tmpKey\\", String.valueOf(alert.getId()));\\r\\n            collector.collect(alert);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n##### \\t3. flink \u4f7f\u7528logback \u8fd8\u662flog4j,  \u672cdemo \u4f7f\u7528\u7684\u662fLogback , \u9700\u8981\u505a\u4ee5\u4e0b\u7684\u5904\u7406\\r\\n\\r\\n\\r\\n\\r\\n1.   \u670d\u52a1\u5668\u7aef\u5904\u7406:    flink \u7684\u5b89\u88c5\u76ee\u5f55\u4e0b\u9762\u653e\u5165logback \u7684\u5305\uff0c`log4j-over-slf4j-1.7.15.jar,logback-classic-1.2.3.jar,logback-core-1.2.3.jar ` ,\\r\\n2.   \u7136\u540e\u5220\u9664lib\u4e0b\u9762\u5173\u4e8elog4j\u7684\u5305 `log4j-1.2.17.jar\u53caslf4j-log4j12-1.7.15.jar`), \u5982\u679c\u4e0d\u61c2\u8fd9\u4e9b\u5305\u7684\u4f5c\u7528\u53ef\u4ee5\u4ed4\u7ec6\u9605\u8bfb: [JAVA \u5e38\u89c1\u65e5\u5fd7\u4f9d\u8d56\u5904\u7406\u7ec6\u8282](https://www.jianshu.com/p/7d12a8c25a38)  \uff0c\\r\\n3.   \u5728\u4ee3\u7801\u7684pom\u6587\u4ef6\u91cc\u9762\u6392\u9664log4j\u7684\u5305\\r\\n\\r\\n\\t```\\r\\n\\t\\t<dependency>\\r\\n\\t        <groupId>org.apache.flink</groupId>\\r\\n\\t        <artifactId>flink-java</artifactId>\\r\\n\\t        <version>1.13.1</version>\\r\\n\\t        \x3c!--\u6392\u9664log4j--\x3e\\r\\n\\t        <exclusions>\\r\\n\\t            <exclusion>\\r\\n\\t                <groupId>log4j</groupId>\\r\\n\\t                <artifactId>*</artifactId>\\r\\n\\t            </exclusion>\\r\\n\\t            <exclusion>\\r\\n\\t                <groupId>org.slf4j</groupId>\\r\\n\\t                <artifactId>slf4j-log4j12</artifactId>\\r\\n\\t            </exclusion>\\r\\n\\t        </exclusions>\\r\\n\\t        <scope>provided</scope>\\r\\n\\t        </dependency>\\r\\n\\t<dependency>\\r\\n\\t            <groupId>org.apache.flink</groupId>\\r\\n\\t            <artifactId>flink-streaming-java_2.12</artifactId>\\r\\n\\t            <version>1.13.1</version>\\r\\n\\t            \x3c!--\u6392\u9664log4j--\x3e\\r\\n\\t            <exclusions>\\r\\n\\t                <exclusion>\\r\\n\\t                    <groupId>log4j</groupId>\\r\\n\\t                    <artifactId>*</artifactId>\\r\\n\\t                </exclusion>\\r\\n\\t                <exclusion>\\r\\n\\t                    <groupId>org.slf4j</groupId>\\r\\n\\t                    <artifactId>slf4j-log4j12</artifactId>\\r\\n\\t                </exclusion>\\r\\n\\t            </exclusions>\\r\\n\\t           <scope>provided</scope>\\r\\n\\t </dependency>\\r\\n\\r\\n4.  \u5982\u679c\u60f3\u4fee\u6539flink \u7684logback\u7684\u65e5\u5fd7\u6587\u4ef6 \uff0c \u53ef\u4ee5\u5728flink\u7684conf\u76ee\u5f55\u4e0b\u9762\u4fee\u6539\u4e0b\u9762\u7684\u4e09\u4e2a\u6587\u4ef6\\r\\n\\r\\n```\\r\\nlogback-console.xml\\r\\nlogback-session.xml\\r\\nlogback.xml\\r\\n```\\r\\n\\r\\n#### 3.\u53c2\u8003\u5185\u5bb9\\r\\n\\r\\n- [Storm\u6846\u67b6\uff1aStorm\u6574\u5408springboot](https://www.cnblogs.com/gouyg/p/storm-springboot.html)\\r\\n\\r\\n- [Flink\u4f7f\u7528logback\u987b\u77e5]( https://blog.csdn.net/qq_36643786/article/details/90401822)"},{"id":"java-log-adapter-study","metadata":{"permalink":"/java/java-log-adapter-study","source":"@site/java/2020-11-01-java-log-adapter-study.md","title":"JAVA \u5e38\u89c1\u65e5\u5fd7\u4f9d\u8d56\u5904\u7406\u7ec6\u8282","description":"\u672c\u6587\u5e76\u4e0d\u8bbe\u7f6e\u67d0\u4e2a\u65e5\u5fd7\u6846\u67b6\u7684\u914d\u7f6e,\u53ea\u662f\u4ecb\u7ecd\u5176\u4ed6\u65e5\u5fd7\u6846\u67b6\u548cslf4j \u7684\u5207\u6362\u4e0e\u6865\u63a5\u914d\u5408\u4f7f\u7528","date":"2020-11-01T00:00:00.000Z","formattedDate":"November 1, 2020","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"log","permalink":"/java/tags/log"}],"readingTime":6.71,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"java-log-adapter-study","title":"JAVA \u5e38\u89c1\u65e5\u5fd7\u4f9d\u8d56\u5904\u7406\u7ec6\u8282","authors":["jeesk"],"tags":["java","log"]},"prevItem":{"title":"Spring-boot \u6574\u5408flink \u6559\u7a0b","permalink":"/java/spring-boot-mercy-flink"},"nextItem":{"title":"kafka\u6d88\u606f\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u6027\u7684\u5904\u7406\u65b9\u5f0f","permalink":"/java/kafka-msg-keep-ordered"}},"content":"#### \u672c\u6587\u5e76\u4e0d\u8bbe\u7f6e\u67d0\u4e2a\u65e5\u5fd7\u6846\u67b6\u7684\u914d\u7f6e,\u53ea\u662f\u4ecb\u7ecd\u5176\u4ed6\u65e5\u5fd7\u6846\u67b6\u548cslf4j \u7684\u5207\u6362\u4e0e\u6865\u63a5\u914d\u5408\u4f7f\u7528\\r\\n\\r\\n>  \u5f53\u4f60\u7684\u9879\u76ee\u4e2d\u6709spring ,kafka, hbase , hadoop \u7b49\u6846\u67b6\u7684\u65f6\u5019, \u65e5\u5fd7\u4f9d\u8d56\u6df7\u4e71,\u5404\u79cdpom\u773c\u82b1\u7f2d\u4e71, \u770b\u4e86\u4e0b\u9762\u7684\u6587\u5b57, \u8ba9\u4f60\u8f7b\u677e\u638c\u63e1\u5404\u79cd\u65e5\u5fd7\u6846\u67b6\u7684\u6df7\u5408\u4f7f\u7528\u548c\u5ac1\u63a5.\\r\\n\\r\\n##### \u5404\u79cd\u5305\u4ecb\u7ecd\\r\\n\\r\\n1.  log4j\\r\\n\\r\\n    *   `log4j` : \u5b9e\u73b0\u548c\u63a5\u53e3\u90fd\u5728\u8fd9\u4e2a\u5305\\r\\n\\r\\n2.  log4j2\\r\\n\\r\\n    *   `log4j-core` : \u6838\u5fc3\u5305,\u65e5\u5fd7\u5b9e\u73b0\\r\\n\\r\\n    *   `log4j-api` : \u65e5\u5fd7api\\r\\n\\r\\n3.  logback\\r\\n\\r\\n    *   `logback-core` : logback \u6838\u5fc3\u5305\\r\\n\\r\\n    *   `logback-classic` : \u5b9e\u73b0\u5305,\u5b9e\u73b0\u4e86slf4j-api\\r\\n\\r\\n4.  commons-logging\\r\\n\\r\\n    *   `commons-logging` : jcl\u7684\u539f\u751f\u5168\u90e8\u5185\u5bb9\\r\\n\\r\\n    *   `log4j-jcl` : jcl\u5230log4j2\u7684\u6865\u6881 , \u4f7f\u7528jcl\u7684\u5b9e\u73b0, \u4f46\u662f\u4f7f\u7528log4j2\u7684\u63a5\u53e3\\r\\n\\r\\n    *   `jcl-over-slf4j` \uff1ajcl\u5230slf4j\u7684\u6865\u6881,\u4f7f\u7528slf4j \u7684api, \u65e5\u5fd7\u6253\u5370 \u5b9e\u73b0\u4f7f\u7528jcl\\r\\n\\r\\n## \u65e5\u5fd7\u6846\u67b6\u5305\u7684\u5206\u7c7b\\r\\n\\r\\n1.  api \u5305, \u8fd9\u79cd\u5305\u53ea\u6709\u63a5\u53e3, \u6bd4\u5982slf4j-api, log4j-api ,\u6bcf\u4e2a\u65e5\u5fd7\u6846\u67b6\u90fd\u8981\u81ea\u5df1api.\\r\\n\\r\\n2.  \u5b9e\u73b0\u5305, \u6bd4\u5982slf4j-api \u7684\u5b9e\u73b0\u6709logback-classic, log4j-api\u7684\u5b9e\u73b0\u6709log4j.\\r\\n\\r\\n3.  \u6865\u63a5\u5668 \u65e5\u5fd7\u7edf\u4e00\u7ba1\u7406\u4f7f\u7528slf4j, \u4f46\u662f\u5b9e\u73b0\u7528\u7684jcl, \u6216\u8005jul,\u6216\u8005log4j , \u4f46\u662f\u8fd9\u4e9b\u5b9e\u73b0\u90fd\u4e0d\u662fslf4j\u7684api\u7684\u5b9e\u73b0,\u53ea\u80fd\u63d0\u4f9b\u6865\u63a5\u5668,\u5c06slf4j \u6253\u5370\u7684\u65e5\u5fd7, \u4ea4\u7ed9\u5177\u4f53\u7684\u5b9e\u73b0\u53bb\u64cd\u4f5c, \u8fd9\u91cc\u7684\u6865\u63a5\u5668\u4e5f\u53ef\u4ee5\u53eb\u505a\u9a71\u52a8.\\r\\n\\r\\n4.  \u5207\u6362\u5668, \u6211\u9700\u8981\u5c06log4j \u5207\u6362\u5230Logback , \u8fd9\u4e2a\u65f6\u5019, \u6211\u53ef\u4ee5\u4f7f\u7528slf4j\u63d0\u4f9b\u7684\u5047\u5305, \u66ff\u6362\u539f\u6709\u7684\u5b9e\u73b0\u7c7b, \u7136\u540e\u5c06\u65e5\u5fd7\u91cd\u65b0\u4ea4\u7ed9slf4j\u7ba1\u7406. \u6bd4\u5982, \u9879\u76ee\u4f7f\u7528\u7684\u662fLog4j, \u90a3\u4e48\u76f4\u63a5\u4f7f\u7528 `log4j-over-slf4j` \u66ff\u6362log4j \u5373\u53ef. (\u5176\u5b9e\u5728\u5f88\u591a\u7684\u6587\u7ae0\u4e2d\u5e76\u6ca1\u6709\u5207\u6362\u5668\u8fd9\u4e2a\u6982\u5ff5, \u5305\u62ecmaven\u7684\u5206\u7c7b\u4e2d, \u4f46\u662f\u4e3a\u4e86\u533a\u5206\u529f\u80fd, \u8fd9\u91cc\u6211\u8fd8\u662f\u533a\u5206\u51fa\u6765\u4e86)\\r\\n\\r\\n##### \u6865\u63a5\u5668\u5305\\r\\n\\r\\n> \u4ec0\u4e48\u662f\u6865\u63a5\u5668, \u5c31\u662f\u67d0\u4e2a\u65e5\u5fd7\u7684\u5177\u4f53\u5b9e\u73b0, \u8981\u60f3\u914d\u5408slf4j\u7684api\u4f7f\u7528, \u4f46\u662f\u5728\u4f7f\u7528slf4j \u7684api\u7684\u6253\u5370, \u65e0\u6cd5\u627e\u5230\u5bf9\u5e94\u7684\u5b9e\u73b0\u7c7b,  \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u7b2c\u4e09\u65b9\u5305\u6865\u63a5\u4e00\u4e0b, \u5f53slf4j \u6253\u5370\u65e5\u5fd7\u7684\u65f6\u5019,\u4ea4\u7ed9\u5177\u4f53\u7684\u65e5\u5fd7\u5b9e\u73b0\u7c7b.\\r\\n\\r\\n1.  `slf4j-jdk14` \uff1aslf4j\u5230jdk-logging\u7684\u6865\u6881\\r\\n\\r\\n2.  `slf4j-log4j12` \uff1aslf4j\u5230log4j1\u7684\u6865\u6881\\r\\n\\r\\n3.  `log4j-slf4j-impl` \uff1aslf4j\u5230log4j2\u7684\u6865\u6881\\r\\n\\r\\n4.  `logback-classic` \uff1aslf4j\u5230logback\u7684\u6865\u6881\\r\\n\\r\\n5.  `slf4j-jcl` \uff1aslf4j\u5230commons-logging\u7684\u6865\u6881\\r\\n\\r\\n##### \u5207\u6362\u5668\u5305( \u5077\u5929\u6362\u65e5, slf4j \u63d0\u4f9b\u4e86\u5176\u4ed6\u65e5\u5fd7\u7684\u5305, \u66ff\u6362\u4e86\u539f\u6765\u7684\u7a0b\u5e8f, \u76f4\u63a5\u5c06\u65e5\u5fd7\u4ea4\u7ed9\u4e86slf4j\u7ba1\u7406, \u5e76\u4e14\u4e0d\u9700\u8981\u66f4\u6539\u4ee3\u7801. \u4f46\u662fjul \u9664\u5916)\\r\\n\\r\\n> \u4ec0\u4e48\u662f\u5207\u6362\u5668, \u5c31\u662f\u5f53\u4e00\u4e2a\u6a21\u5757\u4f7f\u7528\u4e86\u4ed6\u81ea\u5df1\u7684\u65e5\u5fd7\u5b9e\u73b0\u548capi , \u4f46\u662f\u60f3\u5c06\u65e5\u5fd7\u7684\u8f93\u51fa\u4ea4\u7ed9slf4j \u7ba1\u7406. \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u4e00\u4e2a\u5207\u6362\u5668\u5c06\u7b2c\u4e09\u65b9\u6a21\u5757\u7684\u65e5\u5fd7\u5207\u6362\u5230slf4j.\\r\\n\\r\\n1.  `jul-to-slf4j` \uff1ajdk-logging\u5230slf4j\u7684\u6865\u6881, \u5c06jul \u65e5\u5fd7\u4ea4\u7ed9slf4j\u7ba1\u7406, \u8fd9\u4e2a\u5305\u4e0d\u80fd\u548cslf4j-jdk14 \u5171\u5b58, \u5426\u5219\u4f1a\u5bfc\u81f4\u65e0\u9650\u5faa\u73af.\\r\\n\\r\\n2.  `jcl-over-slf4j` \uff1acommons-logging\u5230slf4j\u7684\u6865\u6881,commons-logging.jar\u66ff\u6362 \u4e3a jcl-over-slf4j.jar, \u5c06jcl\u7684\u65e5\u5fd7\u4ea4\u7ed9slf4j\u7ba1\u7406.\\r\\n\\r\\n3.  `slf4j-jcl.jar` : \u6211\u4eec\u7684\u4e00\u4e9b\u7528\u6237\u5728\u5207\u6362\u5230 SLF4J API \u540e\u610f\u8bc6\u5230\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cJCL \u7684\u4f7f\u7528\u662f\u5f3a\u5236\u6027\u7684\uff0c\u4ed6\u4eec\u4f7f\u7528 SLF4J \u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u8fd9\u79cd\u4e0d\u5e38\u89c1\u4f46\u5f88\u91cd\u8981\u7684\u60c5\u51b5\uff0cSLF4J \u63d0\u4f9b\u4e86 JCL \u7ed1\u5b9a\uff0c\u53ef\u5728\u6587\u4ef6slf4j-jcl.jar \u4e2d\u627e\u5230\u3002JCL \u7ed1\u5b9a\u4f1a\u5c06\u901a\u8fc7 SLF4J API \u8fdb\u884c\u7684\u6240\u6709\u65e5\u5fd7\u8bb0\u5f55\u8c03\u7528\u59d4\u6258\u7ed9 JCL\u3002\u56e0\u6b64\uff0c\u5982\u679c\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\u73b0\u6709\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b \u4f7f\u7528 JCL\uff0c\u90a3\u4e48\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u90e8\u5206\u4ecd\u7136\u53ef\u4ee5\u4ee5\u5bf9\u66f4\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u900f\u660e\u7684\u65b9\u5f0f\u9488\u5bf9 SLF4J API \u8fdb\u884c\u7f16\u7801\u3002\u60a8\u9009\u62e9\u7684 SLF4J API \u5bf9\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528 JCL \u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u662f\u4e0d\u53ef\u89c1\u7684\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e0b. jcl-overslf4j.jar-\u4e0d\u53ef\u4e0eslf4j-jcl.jar \u540c\u65f6\u4f7f\u7528.\\r\\n\\r\\n4.  `log4j-over-slf4j` \uff1alog4j1\u5230slf4j\u7684\u6865\u6881, \u800c\u53ea\u9700\u5c06log4j.jar\u6587\u4ef6\u66ff\u6362\u4e3a log4j-over-slf4j.jar.\\r\\n\\r\\n5.  `log4j-to-slf4j` log4j2 \u5230slf4j\u7684\u6865\u6881, \u5c06log4j2\u7684\u65e5\u5fd7\u79fb\u4ea4\u7ed9slf4j, \u539f\u6587 [\u539f\u6587](https://logging.apache.org/log4j/2.x/log4j-to-slf4j/index.html).\\r\\n\\r\\n#### \u65e5\u5fd7\u65b9\u6848:\\r\\n\\r\\n##### \u76f4\u63a5\u4f7f\u7528api\u548c\u5b9e\u73b0\\r\\n\\r\\n1.  \u76f4\u63a5\u4f7f\u7528java common log \u6a21\u5757: `use-jcl-log`\\r\\n\\r\\n2.  \u76f4\u63a5\u4f7f\u7528log4j \u7684api\u548c\u5b9e\u73b0 \u6a21\u5757: `use-log4j`\\r\\n\\r\\n3.  \u76f4\u63a5\u4f7f\u7528log4j2 \u7684api\u548c\u5b9e\u73b0 \u6a21\u5757: `use-log4j2-impl-and-log4j2-api`\\r\\n\\r\\n4.  \u76f4\u63a5\u4f7f\u7528jdk-logging \u5b9e\u73b0\u548capi \u6a21\u5757: `use-jdk-logging`\\r\\n\\r\\n5.  \u76f4\u63a5\u4f7f\u7528slf4j-api\u548cslf4j-simple\u7b80\u5355\u7684\u65e5\u5fd7\u5b9e\u73b0 \u6a21\u5757: `slf4j-sample-impl`\\r\\n\\r\\n##### \u4f7f\u7528slf4j\u81ea\u5e26\\r\\n\\r\\n1.  \u4f7f\u7528slf4j\u7684api,\u6ca1\u6709\u4efb\u4f55\u5b9e\u73b0 \u6a21\u5757: `nologImpl`\\r\\n\\r\\n2.  \u4f7f\u7528slf4j\u7684api, \u5e76\u4e14\u540c\u65f6\u4f7f\u7528slf4f-nop,\u548cslf4j-sample \u5b9e\u73b0 \u6a21\u5757: `multilogImpl`\\r\\n\\r\\n##### \u4f7f\u7528\u7b2c\u4e09\u65b9\u5b9e\u73b0 \u548cslf4j \u7684api\\r\\n\\r\\n1.  \u4f7f\u7528log4j \u7684\u5b9e\u73b0,\u7ed3\u5408slf4j \u7684api \u6a21\u5757: `user-log4jImpl-and-slf4japi`\\r\\n\\r\\n2.  \u4f7f\u7528jdk\u7684\u5b9e\u73b0,\u7ed3\u5408slf4j \u7684api \u6a21\u5757: `use-jdk-logging-imple-and-sl4j-api`\\r\\n\\r\\n3.  \u4f7f\u7528 jcl \u65e5\u5fd7\u5b9e\u73b0,\u7ed3\u5408slf4j\u7684api \u6a21\u5757: `use-jcl-imple-and-slf4j-api`\\r\\n\\r\\n4.  \u4f7f\u7528logback\u7684\u65e5\u5fd7\u5b9e\u73b0,\u7ed3\u5408slf4j\u7684api \u6a21\u5757: `use-logback-imple-and-slf4j-api`\\r\\n\\r\\n5.  \u4f7f\u7528log4j2 \u7684\u65e5\u5fd7\u5b9e\u73b0,\u7ed3\u5408slf4j \u7684api \u6a21\u5757: `use-log4j2-imple-and-slf4j-api`\\r\\n\\r\\n##### \u65e5\u5fd7\u5207\u6362\u5668,\u5f15\u7528\u7684\u6a21\u5757\u4f7f\u7528\u4e86\u81ea\u5df1\u7684\u65e5\u5fd7\u5b9e\u73b0\u548capi, \u5c06\u65e5\u5fd7\u8f93\u51fa\u5207\u6362\u5230slf4j \u4e0a\u9762 (\u9879\u76ee\u4e2d\u5e38\u7528,\u5e38\u89c1\u4f9d\u8d56\u5904\u7406)\\r\\n\\r\\n1.  jcl \u5207\u6362\u5230 slf4j , \u6700\u7ec8\u7531logback \u6253\u5370 \u6a21\u5757: `remove-common-logging-use-slf4j`\\r\\n\\r\\n2.  log4j \u5207\u6362\u5230 slf4j ,\u6700\u7ec8\u7531logback \u6253\u5370 \u6a21\u5757: `remove-log4j-use-slf4j-and-use-logback-impl`\\r\\n\\r\\n3.  jdk logging \u5207\u6362\u5230 slf4j,\u6700\u7ec8\u7531logback \u6253\u5370 \u6a21\u5757: `remove-jdk-loggin-use-slf4j-and-logback-impl`\\r\\n\\r\\n> \u7531\u4e8e\u4f5c\u8005\u6c34\u5e73\u6709\u9650, \u51fa\u73b0\u7684\u9519\u8bef\u8bf7\u591a\u591a\u5305\u542b. \u70e6\u8bf7\u6307\u70b9\u4e00\u4e8c.\\r\\n\\r\\n\u672c\u6587\u7b80\u4e66\u5730\u5740: [https://www.jianshu.com/p/7d12a8c25a38](https://www.jianshu.com/p/7d12a8c25a38)\\r\\n\u5168\u6587\u4f8b\u5b50\u5982\u4e0b: https://gitee.com/imomoda/log4-study"},{"id":"kafka-msg-keep-ordered","metadata":{"permalink":"/java/kafka-msg-keep-ordered","source":"@site/java/2019-05-01-kafka-msg-keep-ordered.md","title":"kafka\u6d88\u606f\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u6027\u7684\u5904\u7406\u65b9\u5f0f","description":"\u7531\u4e8ekafka \u7684\u5206\u533a\u662f\u7269\u7406\u9694\u79bb\uff0c\u6240\u6709\u53ea\u6709\u8ba9\u5206\u533a\u4fdd\u6301\u987a\u5e8f\u6d88\u8d39\u3002\u5728\u6211\u4eec\u7684\u5e7f\u544a\u4e1a\u52a1\u4e2d\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u8ba9\u67d0\u4e2a\u5e7f\u544a\u4f4d\u4e0b\u9762\u7684\u6570\u636e\u4fdd\u6301\u5206\u533a\u4e00\u81f4\u6027\u5373\u53ef\u3002","date":"2019-05-01T00:00:00.000Z","formattedDate":"May 1, 2019","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"DI","permalink":"/java/tags/di"},{"label":"IOC","permalink":"/java/tags/ioc"}],"readingTime":1,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"kafka-msg-keep-ordered","title":"kafka\u6d88\u606f\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u6027\u7684\u5904\u7406\u65b9\u5f0f","tags":["java","DI","IOC"],"authors":["jeesk"]},"prevItem":{"title":"JAVA \u5e38\u89c1\u65e5\u5fd7\u4f9d\u8d56\u5904\u7406\u7ec6\u8282","permalink":"/java/java-log-adapter-study"},"nextItem":{"title":"webflux,kakfa,redis,protostuff \u541e\u5410\u91cf\u4f18\u5316\u8fd14000QPS","permalink":"/java/webflux-vs-servlet3.0-pressure-test"}},"content":"> \u7531\u4e8ekafka \u7684\u5206\u533a\u662f\u7269\u7406\u9694\u79bb\uff0c\u6240\u6709\u53ea\u6709\u8ba9\u5206\u533a\u4fdd\u6301\u987a\u5e8f\u6d88\u8d39\u3002\u5728\u6211\u4eec\u7684\u5e7f\u544a\u4e1a\u52a1\u4e2d\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u8ba9\u67d0\u4e2a\u5e7f\u544a\u4f4d\u4e0b\u9762\u7684\u6570\u636e\u4fdd\u6301\u5206\u533a\u4e00\u81f4\u6027\u5373\u53ef\u3002\\r\\n\\r\\n\\r\\n1. \u6307\u5b9apartitionKey , \u5e76\u4e14\u4e00\u4e2apartition\u4e00\u4e2a\u6d88\u8d39\u8005\u7ebf\u7a0b\\r\\n```\\r\\nkafkaProducer.send(new ProducerRecord<>(\\"fad-service-show\\", 1,id + \\"\\", id + \\"\\"));\\r\\n```\\r\\n\u8fd9\u91cc\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662ftopic, \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fpartion.\\r\\n\u4e0a\u9762\u7684\u6d88\u606f\u5c06\u4f1a\u5206\u53d1\u5230  fad-service-show-1 \u7684partition\u4e2d\u53bb,\\r\\n\u5728kafka consumer \u7684\\r\\n```\\r\\n\\t\\tfor (int i = 0; i < 8; i++) {\\r\\n\\t\\t\\t\\tlistTP.add(new TopicPartition(\\"fad-service-show\\", i));\\r\\n\\t\\t}\\r\\n        consumer.assign(listTP);\\r\\n```\\r\\n\u4e0a\u9762\u7684consumer \u53ef\u4ee5\u6307\u5b9a\u8ba2\u9605consumer\u7684partition.\\r\\n2. broker \u5b95\u673a\u540e, partition\u7684\u6570\u91cf\u4e0d\u4f1a\u51cf\u5c11, \u4e5f\u4e0d\u4f1a\u5f71\u54cdpartitionKey\u7684sharding. \u6240\u4ee5\u8bf4, \u5982\u679c\u8bf4\u5982\u679c\u4e00\u4e2atopic , n\u4e2apartition, \u4f7f\u7528\u987a\u5e8f\u6d88\u8d39\u76f4\u63a5\u6307\u5b9apartition\u5373\u53ef."},{"id":"webflux-vs-servlet3.0-pressure-test","metadata":{"permalink":"/java/webflux-vs-servlet3.0-pressure-test","source":"@site/java/2019-03-04-webflux-vs-servlet-pressure-test.md","title":"webflux,kakfa,redis,protostuff \u541e\u5410\u91cf\u4f18\u5316\u8fd14000QPS","description":"__","date":"2019-03-04T00:00:00.000Z","formattedDate":"March 4, 2019","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"webflux","permalink":"/java/tags/webflux"},{"label":"servlet","permalink":"/java/tags/servlet"}],"readingTime":1.195,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"webflux-vs-servlet3.0-pressure-test","title":"webflux,kakfa,redis,protostuff \u541e\u5410\u91cf\u4f18\u5316\u8fd14000QPS","authors":["jeesk"],"tags":["java","webflux","servlet"]},"prevItem":{"title":"kafka\u6d88\u606f\u987a\u5e8f\u4fdd\u6301\u4e00\u81f4\u6027\u7684\u5904\u7406\u65b9\u5f0f","permalink":"/java/kafka-msg-keep-ordered"},"nextItem":{"title":"java \u6027\u80fd\u4f18\u5316\u7b14\u8bb0","permalink":"/java/java-opt-note"}},"content":"__\\r\\n\\r\\n1.  \u5728\u865a\u62df\u673a 8c32g  ,\u4e00\u4e2atomcat \u5b9e\u73b0400~500 \u7684\u5e76\u53d1, 3000QPS \u5df2\u7ecf\u5feb\u662f\u6781\u9650, \u7531\u4e8e\u662f\u963b\u585e\u5f0f\u7f16\u7a0b, \u5bfc\u81f4\u54cd\u5e94\u65f6\u957f\u7684\u7684\u5747\u503c\u548c\u6700\u503c\u5dee\u8ddd\u76f8\u5f53\u7684\u5927.  \u901a\u8fc7webflux \u53ef\u4ee5\u589e\u52a0\u5e76\u53d1\u91cf, \u540c\u65f6\u541e\u5410\u91cf\u6709\u6240\u6539\u5584.\\r\\n\\r\\n\u4e0b\u9762\u662f\u901a\u8fc7jvm \u8c03\u4f18\u540e, \u4e0d\u540c\u7684web\u67b6\u6784\u7684\u538b\u529b\u6d4b\u8bd5\u56fe.\\r\\n\u673a\u5668:  \u5185\u7f51\u4e0b 8c32g\u865a\u62df\u673a , 1\u53f0\u538b\u6d4b\u673a\u5668, 1\u53f0\u670d\u52a1.  \u5c5e\u4e8e\u76f4\u8fde\u538b\u6d4b, \u672a\u7ecf\u8fc7\u7f51\u5173.\\r\\n\u4e0b\u9762\u662f\u538b\u6d4b\u7ed3\u679c.\\r\\n![img.png](img.png)\\r\\n1.  webflux \u7684\u541e\u5410\u91cf \u9ad8\u4e8e\u4f20\u7edfservlet \u7684\u540c\u6b65io,\u5927\u7ea6\u5728 %10~15\u7684\u6548\u679c\\r\\n2.  webflux  \u7684\u8017\u65f6\u76f8\u5bf9\u4e8e\u4f20\u7edfservlet\u66f4\u52a0\u5747\u5300\\r\\n3.  \u8017\u65f6\u6539\u5584\u4e0d\u5c11.\\r\\n\\r\\n\u603b\u4f53\u6765\u8bf4, \u5168\u5f02\u6b65\u7684webflux \u786e\u5b9e\u6bd4\u4f20\u7edf\u7684servlet  \u8981\u4f18\u79c0\u4e0d\u5c11.\\r\\n\\r\\njvm \u8c03\u4f18\u53c2\u6570\u76f8\u5173  \u4f7f\u7528g1\u5783\u573e\u5783\u573e\u56de\u6536,\u6bd4\u8f83\u6fc0\u8fdb. \u5bf9\u4e8ewebflux \u6765\u8bf4\u6548\u679c\u4f18\u5316\u7279\u522b\u597d.\\r\\n```\\r\\n--server.port=8081 -Xms8g -Xmx8g -Xmn4g -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m -Xloggc:/dev/shm/mq_gc_%mxs.log\\r\\n```"},{"id":"java-opt-note","metadata":{"permalink":"/java/java-opt-note","source":"@site/java/2019-02-24-java-opt-note.md","title":"java \u6027\u80fd\u4f18\u5316\u7b14\u8bb0","description":"\u6307\u6807:","date":"2019-02-24T00:00:00.000Z","formattedDate":"February 24, 2019","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"opt","permalink":"/java/tags/opt"}],"readingTime":2.985,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"java-opt-note","title":"java \u6027\u80fd\u4f18\u5316\u7b14\u8bb0","authors":["jeesk"],"tags":["java","opt"]},"prevItem":{"title":"webflux,kakfa,redis,protostuff \u541e\u5410\u91cf\u4f18\u5316\u8fd14000QPS","permalink":"/java/webflux-vs-servlet3.0-pressure-test"},"nextItem":{"title":"ThreadPoolExecutor\u53c2\u6570\u8be6\u89e3\u548c\u4f18\u5316\u5efa\u8bae","permalink":"/java/java-threadpool-config-opt-adivse"}},"content":"\u6307\u6807:\\r\\n1.  \u6027\u80fd\u6307\u6807: \u541e\u5410\u91cf,\u54cd\u5e94\u901f\u5ea6\\r\\n2.  \u54cd\u5e94\u65f6\u95f4: \u5e73\u5747\u54cd\u5e94\u65f6\u95f4, \u767e\u5206\u6570\\r\\n3.   \u5e76\u53d1\u91cf\\r\\n4. \u79d2\u5f00\u7387\\r\\n5. \u6b63\u786e\u6027\\r\\n\\r\\nlinux \u7cfb\u7edf\\r\\ntop - 1:\\r\\nus: \u7528\u6237\u7684\u6001\u6240\u5360\u767e\u5206\u6bd4\\r\\nsy: \u7cfb\u7edf\u6001\u6240\u5360\u767e\u5206\u6bd4\\r\\nni: \u9ad8\u4f18\u5148\u7ea7\u5e94\u7528\u6240\u5360\u767e\u5206\u6bd4\\r\\nid: cpu \u7a7a\u95f2\u767e\u5206\u6bd4\\r\\nhi: \u786c\u4e2d\u65ad\u767e\u5206\u6bd4\\r\\nsi: \u8f6f\u4e2d\u65ad\u767e\u5206\u6bd4\\r\\nst: \u5bbf\u4e3b\u673a\u961f\u865a\u62df\u673a\u7684\u5f71\u54cd\\r\\nwa: io \u7b49\u5f85\u78c1\u76d8,\u5199\u5165\u5199\u51fa\\r\\n\\r\\nload average:  \u8868\u793a1 \u5206\u949f, 5 \u5206\u949f 15 \u5206\u949f\u7684\u8d1f\u8f7d\\r\\n\\r\\nvmstat :\\r\\nvmstat  3  60 , \u8868\u793a3\u79d2\u5237\u65b0\u4e00\u6b21, \u6301\u7eed60\u79d2\\r\\nb \u5217\u8bfb\u5199\u78c1\u76d8\\r\\nsi/so:  \u4ea4\u6362\u5206\u533a\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\\r\\ncs:  \u4e0a\u4e0b\u6587\u5207\u6362\\r\\n\\r\\n\u67e5\u770b\u5185\u5b58\u4fe1\u606f: /proc/meminfo\\r\\n\u67e5\u770bCPU\u4fe1\u606f: /proc/cpuinfo\\r\\njvm \u9884\u5148\u5206\u914d\u5185\u5b58: -XX:+AlwaysPreTouch\\r\\n\u4f7f\u7528nmon \u5de5\u5177:  m\u52a0\u5165\u5185\u5b58,c\u52a0\u5165cpu,n \u52a0\u5165\u7f51\u7edc,d\u52a0\u5165\u78c1\u76d8\\r\\n\\r\\n\\r\\n-Dcom.sun.management.jmxremote.port=14000\\r\\n-Dcom.sun.management.jmxremote.authenticate=false\\r\\n-Dcom.sun.management.jmxremote.ssl=false\\r\\n\\r\\n\\r\\n\u6027\u80fd\u7684\u51e0\u4e2a\u6d4b\u8bd5\u5de5\u5177:\\r\\nnmon : \u7cfb\u7edf\u6027\u80fd\\r\\njconsole / visualVm : java \u7ebf\u7a0b\\r\\njcmd : java \u5e94\u7528\u8be6\u7ec6\u6570\u636e\\r\\narthas: \u5355\u4e2a\u8bf7\u6c42\u94fe\u7684\u8be6\u60c5\\r\\nwrk: \u538b\u529b\u6d4b\u8bd5\\r\\n2 \u4e2a\u7ebf\u7a0b. 100 \u4e2a\u8fde\u63a5   \u6301\u7eed10 s\\r\\nwrk -t2 -c10 -d10s http://qf.csmxwl.com/fund/index/dj\\r\\n\\r\\n```\\r\\n[root@ggpt06 wrk]# ./wrk -t2 -c20 -d3s http://qf.csmxwl.com/fund/index/dj   \\r\\nRunning 3s test @ http://qf.csmxwl.com/fund/index/dj\\r\\n  2 threads and 20 connections\\r\\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\\r\\n    Latency     1.32s   639.51ms   1.83s    75.00%\\r\\n    Req/Sec     1.00      0.82     2.00     42.86%\\r\\n  7 requests in 3.00s, 415.46KB read\\r\\n  Socket errors: connect 0, read 0, write 0, timeout 3\\r\\nRequests/sec:      2.33\\r\\nTransfer/sec:    138.37KB\\r\\n```\\r\\n12 threads and 100 connections:\\r\\n\u603b\u5171\u662f12\u4e2a\u7ebf\u7a0b,100\u4e2a\u8fde\u63a5(\u4e0d\u662f\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u5e94\u4e00\u4e2a\u8fde\u63a5)\\r\\nlatency\u548cReq/Sec:\\r\\n\u4ee3\u8868\u5355\u4e2a\u7ebf\u7a0b\u7684\u7edf\u8ba1\u6570\u636e,latency\u4ee3\u8868\u5ef6\u8fdf\u65f6\u95f4,Req/Sec\u4ee3\u8868\u5355\u4e2a\u7ebf\u7a0b\u6bcf\u79d2\u5b8c\u6210\u7684\u8bf7\u6c42\u6570\uff0c\u4ed6\u4eec\u90fd\u5177\u6709\u5e73\u5747\u503c, \u6807\u51c6\u504f\u5dee, \u6700\u5927\u503c, \u6b63\u8d1f\u4e00\u4e2a\u6807\u51c6\u5dee\u5360\u6bd4\u3002\u4e00\u822c\u6211\u4eec\u6765\u8bf4\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u5e73\u5747\u503c\u548c\u6700\u5927\u503c. \u6807\u51c6\u5dee\u5982\u679c\u592a\u5927\u8bf4\u660e\u6837\u672c\u672c\u8eab\u79bb\u6563\u7a0b\u5ea6\u6bd4\u8f83\u9ad8. \u6709\u53ef\u80fd\u7cfb\u7edf\u6027\u80fd\u6ce2\u52a8\u5f88\u5927.\\r\\n23725 requests in 30.05s, 347.47MB read\\r\\n\u572830\u79d2\u4e4b\u5185\u603b\u5171\u670923725\u4e2a\u8bf7\u6c42,\u603b\u5171\u8bfb\u53d6347.47MB\u7684\u6570\u636e\\r\\nSocket errors: connect 0, read 48, write 0, timeout 50\\r\\n\u603b\u5171\u670948\u4e2a\u8bfb\u9519\u8bef,50\u4e2a\u8d85\u65f6.\\r\\nRequests/sec\u548cTransfer/sec\\r\\n\u6240\u6709\u7ebf\u7a0b\u5e73\u5747\u6bcf\u79d2\u949f\u5b8c\u6210\u4e86789.57\u4e2a\u8bf7\u6c42,\u6bcf\u79d2\u949f\u8bfb\u53d611.56MB\u6570\u636e\u91cf\\r\\n\\r\\n\\r\\nGuava :\\r\\nweakValue,weakKey\\r\\n\u5f53\u6ca1\u6709\u4efb\u4f55\u5f3a\u5f15\u7528\uff0c\u4e0e key \u6216\u8005 value \u6709\u5173\u7cfb\u65f6\uff0c\u5c31\u5220\u6389\u6574\u4e2a\u7f13\u5b58\u9879\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u7ecf\u5e38\u88ab\u8bef\u89e3\u3002\\r\\n1. maxumumSize\\r\\n2. initalCapacity"},{"id":"java-threadpool-config-opt-adivse","metadata":{"permalink":"/java/java-threadpool-config-opt-adivse","source":"@site/java/2019-02-03-java-threadpool-config-opt-advise.md","title":"ThreadPoolExecutor\u53c2\u6570\u8be6\u89e3\u548c\u4f18\u5316\u5efa\u8bae","description":"\u6309\u7167\u4e0a\u9762\u53c2\u6570\u987a\u5e8f\u8bb2\u89e3","date":"2019-02-03T00:00:00.000Z","formattedDate":"February 3, 2019","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"log","permalink":"/java/tags/log"}],"readingTime":8.175,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"java-threadpool-config-opt-adivse","title":"ThreadPoolExecutor\u53c2\u6570\u8be6\u89e3\u548c\u4f18\u5316\u5efa\u8bae","authors":["jeesk"],"tags":["java","log"]},"prevItem":{"title":"java \u6027\u80fd\u4f18\u5316\u7b14\u8bb0","permalink":"/java/java-opt-note"},"nextItem":{"title":"log4j\u6253\u5370\u65e5\u5fd7\u7684\u539f\u7406","permalink":"/java/log4j-print-log"}},"content":"```\\r\\n\\t\\tThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\\r\\n\\t\\t\\t5,\\r\\n\\t\\t\\t10,\\r\\n\\t\\t\\t20,\\r\\n\\t\\t\\tTimeUnit.MINUTES,\\r\\n\\t\\t\\tnew SynchronousQueue<Runnable>(),\\r\\n\\t\\t\\tnew ThreadFactory() {\\r\\n\\t\\t\\t\\t@Override\\r\\n\\t\\t\\t\\tpublic Thread newThread(Runnable r) {\\r\\n\\t\\t\\t\\t\\treturn new Thread();\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tnew RejectedExecutionHandler() {\\r\\n\\t\\t\\t\\t@Override\\r\\n\\t\\t\\t\\tpublic void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});\\r\\n```\\r\\n\u6309\u7167\u4e0a\u9762\u53c2\u6570\u987a\u5e8f\u8bb2\u89e3\\r\\n\\r\\n1.    $\\\\color{#FF0000}{corePoolSize \u6838\u5fc3\u7ebf\u7a0b\u6c60\u6570\u91cf }$\\r\\n-  \u521b\u5efa\u7ebf\u7a0b\u6c60\u7684\u65f6\u5019\u6ca1\u6709\u7ebf\u7a0b, \u5f53\u63d0\u4ea4\u4efb\u52a1\u7684\u65f6\u5019\u4f1a\u9646\u7eed\u521b\u5efa\u7ebf\u7a0b, \u5f53corePoolSize \u6ee1\u7684\u65f6\u5019, \u4f1a\u5c06\u4efb\u52a1\u653e\u5230\u961f\u5217\u4e2d\u53bb, \u961f\u5217\u6ee1\u4e86, \u90a3\u4e48\u4f1a\u7ee7\u7eed\u521b\u5efa corePoolIsze \u5230maxPoolSize\u4e4b\u95f4\u7684\u7ebf\u7a0b .\\r\\n-   \u8bbe\u7f6eallowCoreThreadTimeout=true\uff08\u9ed8\u8ba4false\uff09\u65f6\uff0c\u6838\u5fc3\u7ebf\u7a0b\u4f1a\u8d85\u65f6\u5173\u95ed\\r\\n-  prestartAllCoreThread  \u6216\u8005prestartAllCoreThread \u521d\u59cb\u5316\u6838\u5fc3\u7ebf\u7a0b\\r\\n\\r\\n2.   $\\\\color{#FF0000}{maxPoolSize\u6700\u5927\u7ebf\u7a0b\u6c60\u6570\u91cf}$\\r\\n-  \u5f53\u7ebf\u7a0b\u6570\u91cf = maxPoolSize , \u4e14\u4efb\u52a1\u961f\u5217\u5df2\u7ecf\u6ee1\u4e86,  \u7ebf\u7a0b\u6c60\u4f1a\u62d2\u7edd\u4efb\u52a1\u629b\u51fa\u4e00\u573a\\r\\n-  \u6211\u4eec\u7684\u9879\u76ee \u8fd9\u4e2a\u53c2\u6570\u662f Runtime.getRuntime().availableProcessors() * 4 +1 , \u6839\u636e\u538b\u529b\u6d4b\u8bd5\u83b7\u5f97\u6700\u597d\u7684\u6700\u5927\u6838\u5fc3\u6570\u91cf\\r\\n3.  $\\\\color{#FF0000}{keepAliveTime  \u7ebf\u7a0b\u7a7a\u95f2\u65f6\u95f4}$\\r\\n-  \u7a7a\u95f2\u7684\u7ebf\u7a0b\u80fd\u591f\u4fdd\u6301\u7a7a\u95f2\u7684\u65f6\u95f4, \u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4, \u8fd9\u4e00\u90e8\u5206\u7ebf\u7a0b\u5c06\u88ab\u56de\u6536.\\r\\n-  \u6838\u5fc3\u7ebf\u7a0b\u5230\u6700\u5927\u7ebf\u7a0b\u6570\u91cf\u7684\u5dee\u5f02, \u5982\u679c\u4e24\u4e2a\u503c\u76f8\u7b49, \u90a3\u4e48\u8fd9\u4e2a\u53c2\u6570\u6beb\u65e0\u610f\u4e49.\\r\\n4.   $\\\\color{#FF0000}{BlockingQueue \u963b\u585e\u961f\u5217}$\\r\\n-  \u5f53\u6838\u5fc3\u7ebf\u7a0b\u6570\u8fbe\u5230\u6700\u5927\u65f6\uff0c\u65b0\u4efb\u52a1\u4f1a\u653e\u5728\u961f\u5217\u4e2d\u6392\u961f\u7b49\u5f85\u6267\u884c\\r\\n-  \u5e38\u89c1\u7684\u961f\u5217\\r\\n    1.  ArrayBlockingQueue\uff1a \u6709\u754c\u961f\u5217\uff0c\u57fa\u4e8e\u6570\u7ec4\u7ed3\u6784\uff0c\u6309\u7167\u961f\u5217FIFO\u539f\u5219\u5bf9\u5143\u7d20\u6392\u5e8f\uff1b\\r\\n    2.  LinkedBlockingQueue\uff1a\u65e0\u754c\u961f\u5217\uff0c\u57fa\u4e8e\u94fe\u8868\u7ed3\u6784\uff0c\u6309\u7167\u961f\u5217FIFO\u539f\u5219\u5bf9\u5143\u7d20\u6392\u5e8f\uff0cExecutors.newFixedThreadPool()\u4f7f\u7528\u4e86\u8fd9\u4e2a\u961f\u5217\\r\\n    3.  SynchronousQueue \u540c\u6b65\u961f\u5217, \u8be5\u961f\u5217\u4e0d\u5b58\u50a8\u5143\u7d20\uff0c\u6bcf\u4e2a\u63d2\u5165\u64cd\u4f5c\u5fc5\u987b\u7b49\u5f85\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u8c03\u7528\u79fb\u9664\u64cd\u4f5c\uff0c\u5426\u5219\u63d2\u5165\u64cd\u4f5c\u4f1a\u4e00\u76f4\u88ab\u963b\u585e\uff0cExecutors.newCachedThreadPool()\u4f7f\u7528\u4e86\u8fd9\u4e2a\u961f\u5217\uff1b\\r\\n    4.   PriorityBlockingQueue\uff1a\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u5177\u6709\u4f18\u5148\u7ea7\u7684\u65e0\u9650\u963b\u585e\u961f\u5217\u3002\\r\\n\\r\\n6  .   $\\\\color{#FF0000}{ThreadFactory \u7ebf\u7a0b\u5de5\u5382}$\\r\\n-  \u81ea\u5b9a\u4e49\u7ebf\u7a0b\u7684\u540d\u5b57,daemon,\u4f18\u5148\u7ea7\u7b49\\r\\n7.  $\\\\color{#FF0000}{rejectedExecutionHandler \u62d2\u7edd\u7b56\u7565}$\\r\\n-  \u8fd9\u91cc\u7684\u62d2\u7edd\u53ef\u4ee5\u91c7\u53d6\u4f60\u81ea\u5b9a\u4e49\u7684\u529e\u6cd5, \u6bd4\u5982\u4f7f\u7528second \u7ebf\u7a0b\u6c60\u5904\u7406 r , \u6216\u8005\u4e22\u5f03r, \u6216\u8005\u6253\u5370\u51fa\u65e5\u5fd7, \u53d6\u51b3\u4e8e\u4f60\u7684\u4e1a\u52a1.\\r\\n-  \u7ebf\u7a0b\u6c60\u6267\u884c\u62d2\u7edd\u7684\u4e24\u79cd\u60c5\u51b5\\r\\n    1.  \u5f53\u7ebf\u7a0b\u6570\u91cf\u8fbe\u5230maxPoolSize , \u961f\u5217\u5df2\u7ecf\u6ee1\u4e86, \u4f1a\u62d2\u7edd\u65b0\u4efb\u52a1\\r\\n    2.  \u5f53\u7ebf\u7a0b\u6c60\u8c03\u7528shutdown \u7684\u65f6\u5019, \u4f1a\u7b49\u5f85\u7ebf\u7a0b\u6c60\u7684\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5, \u518dshutdown, \u8fd9\u662f\u4e00\u79cd\u4f18\u96c5\u7684\u65b9\u5f0f.  \u8c03\u7528shutdown\u548cshutdown\u5173\u95ed\u4e4b\u524d, \u8fd9\u6bb5\u65f6\u95f4\u4f1a\u62d2\u7edd\u65b0\u4efb\u52a1. shutdownNow, \u4f1a\u7acb\u523b\u5173\u95ed, \u5e76\u4e14\u505c\u6b62\u6267\u884c\u4efb\u52a1. \u548cshutdown \u6709\u5f88\u5927\u533a\u522b.\\r\\n-  \u51e0\u79cd\u62d2\u7edd\u7b56\u7565\\r\\n    1.  AbortPolicy \u4e22\u5f03\u4efb\u52a1, \u629b\u8fd0\u884c\u5f02\u5e38(\u5982\u679c\u4e0d\u8bbe\u7f6e, \u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e00\u4e2a\u7b56\u7565)\\r\\n    2.  CallerRunsPolicy \u6267\u884c\u4efb\u52a1\\r\\n    3.  DiscardPolicy \u5ffd\u89c6\uff0c\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u53d1\u751f\\r\\n    4.  DiscardOldestPolicy \u4ece\u961f\u5217\u4e2d\u8e22\u51fa\u6700\u5148\u8fdb\u5165\u961f\u5217\uff08\u6700\u540e\u4e00\u4e2a\u6267\u884c\uff09\u7684\u4efb\u52a1\\r\\n\\r\\n####  \u7ebf\u7a0b\u6267\u884c\u7684\u4e00\u4e9b\u6d41\u7a0b\\r\\n\\r\\n1.  \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u76ee \u5c0f\u4e8e  < corePoolSize \u3002\u5219\u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u4efb\u52a1\uff0c\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u6267\u884c\u8fd9\u4e2a\u4efb\u52a1(\u5373\u4f7fcore\u7ebf\u7a0b\u4e2d\u4e5f\u6709\u7a7a\u95f2\u7ebf\u7a0b, \u4e5f\u4f1a\u65b0\u521b\u5efa\u7ebf\u7a0b\u4f1a\u6267\u884c)\u3002\\r\\n2.  \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u76ee \u5927\u4e8e\u7b49\u4e8e >= corePoolSize \u3002\\r\\n    \u5bf9\u4e8e\u6bcf\u4e2a\u65b0\u4efb\u52a1\uff0c\u4f1a\u5c06\u5176\u6dfb\u52a0\u5230\u4efb\u52a1\u961f\u5217\u4e2d\u3002\u82e5\u6dfb\u52a0\u6210\u529f\uff0c\u5219\u4efb\u52a1\u7531\u7a7a\u95f2\u7684\u7ebf\u7a0b\u4e3b\u52a8\u5c06\u5176\u4ece\u961f\u5217\u4e2d\u79fb\u9664\u540e\u6267\u884c\u3002\u82e5\u6dfb\u52a0\u5931\u8d25\uff08\u4efb\u52a1\u961f\u5217\u5df2\u6ee1\uff09\uff0c\u5219\u5c1d\u8bd5\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u6267\u884c\u3002\\r\\n3.  \u82e5\u5f53\u524d\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u76ee\u5230\u8fbe maximumPoolSize \uff0c\u5219\u5bf9\u4e8e\u65b0\u4efb\u52a1\u91c7\u53d6\u62d2\u7edd\u7b56\u7565\u3002\\r\\n4.  \u5982\u679c\u7ebf\u7a0b\u6c60\u4e2d\u7684\u6570\u91cf\u5927\u4e8e corePoolSize \u65f6\uff0c\u5982\u679c\u67d0\u4e2a\u7ebf\u7a0b\u7a7a\u95f2\u65f6\u95f4\u8d85\u8fc7 keepAliveTime \uff0c\u7ebf\u7a0b\u4f1a\u88ab\u7ec8\u6b62\uff0c\u76f4\u5230\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u6570\u76ee\u4e0d\u8d85\u8fc7 corePoolSize \u3002\\r\\n5.  \u5982\u679c\u4e3a\u6838\u5fc3\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u8bbe\u7f6e\u5b58\u6d3b\u65f6\u95f4\uff0c\u5219\u5f53\u6838\u5fc3\u7ebf\u7a0b\u6c60\u4e2d\u7684\u7ebf\u7a0b\u7a7a\u95f2\u65f6\u95f4\u8d85\u8fc7 keepAliveTime \uff0c\u5219\u8be5\u7ebf\u7a0b\u4e5f\u4f1a\u88ab\u7ec8\u6b62\\r\\n6. \u5982\u679c\u6838\u5fc3\u7ebf\u7a0b\u6570\u5df2\u7ecf\u8fbe\u5230, \u5982\u679c\u6ca1\u6709\u961f\u5217\u6ca1\u6709\u6ee1\u7684\u8bdd, \u662f\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b. \u6709\u65f6\u5019\u53d6\u51b3\u4f60\u4f7f\u7528\u4ec0\u4e48\u961f\u5217. \u6bd4\u5982\u4f7f\u7528 ArrayBlockingQueue(10), \u5f53\u6838\u5fc3\u7ebf\u7a0b\u5df2\u7ecf\u521b\u5efa\u5b8c\u6210, \u53ea\u6709\u5f53\u961f\u5217\u6ee1\u4e86\u4e4b\u540e\u624d\u4f1a\u7ee7\u7eed\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b. \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fSynchronousQueue, \u5185\u90e8\u53ea\u80fd\u4e00\u4e2a\u7684\u961f\u5217,\u90a3\u4e48\u53ea\u6709\u961f\u5217\u76f4\u63a5\u521b\u5efacore\u7ebf\u7a0b\u5230maxpoolSize \u4e4b\u95f4\u7684\u7ebf\u7a0b\\r\\n\\r\\n####  \u7ebf\u7a0b\u6c60\u6027\u80fd\u4f18\u5316\u5efa\u8bae\\r\\n1.  \u5efa\u8bae\u4f7f\u7528 prestartAllCoreThread  \u6216\u8005prestartAllCoreThread \u521d\u59cb\u5316\u6838\u5fc3\u7ebf\u7a0b\\r\\n2. \u8003\u8651 allowCoreThreadTimeOut  \u5141\u8bb8\u6838\u5fc3\u7ebf\u7a0b\u80fd\u591f\u56de\u6536\u8282\u7ea6\u673a\u5668\u7684\u4f7f\u7528.\\r\\n3. \u62d2\u7edd\u7b56\u7565\u53ef\u4ee5\u5c06\u4efb\u52a1, \u63d0\u4ea4\u7ed9 second \u7ebf\u7a0b\u6c60\u5904\u7406.\\r\\n4. \u81ea\u5b9a\u4e49ThreadFactory ,\u6807\u8bc6\u7ebf\u7a0b, \u65b9\u4fbf\u6392\u67e5\u7ebf\u7a0b\u7684\u4f7f\u7528\u60c5\u51b5\\r\\n\\r\\n####  \u5173\u4e8e\u7ebf\u7a0b\u5f02\u5e38\u662f\u5426\u5904\u7406\u7684\u95ee\u9898:\\r\\n1.  execute : \u5982\u679c\u4e0d\u624b\u52a8\u6355\u83b7\u4e00\u573a, \u7ebf\u7a0b\u6c60\u53ea\u80fd\u91cd\u65b0\u521b\u5efa\u65b0\u7684\u5f02\u5e38\u6765\u586b\u8865\u7a7a\u767d\uff0c\u91cd\u65b0\u521b\u5efa\u7ebf\u7a0b\u8fd9\u662f\u6709\u4ee3\u4ef7\u7684\\r\\n2. submit:   \u56e0\u4e3a\u80fd\u591f\u8c03\u7528 future.get(). \u6240\u4ee5\u6709\u5f02\u5e38\u4e5f\u4f1a\u6355\u83b7, \u4e0d\u4f1a\u9020\u6210\u7ebf\u7a0b\u7ec8\u6b62.\\r\\n```\\r\\n// \u8bc1\u660eexecute \u7684\u5f02\u5e38\\r\\n    @Test\\r\\n    public void test1() throws InterruptedException {\\r\\n        Thread.setDefaultUncaughtExceptionHandler((Thread t, Throwable e) -> {\\r\\n            log.warn(\\"Exception in thread {}\\", t, e);\\r\\n        });\\r\\n        String prefix = \\"test\\";\\r\\n        ExecutorService threadPool = Executors.newFixedThreadPool(1, new ThreadUtil.ThreadFactoryImpl(prefix));\\r\\n        IntStream.rangeClosed(1, 10).forEach(i -> threadPool.execute(() -> {\\r\\n            if (i == 5) {\\r\\n                throw new RuntimeException(\\"error\\");\\r\\n            }\\r\\n            log.info(\\"I\'m done : {}\\", i);\\r\\n            System.out.println(Thread.currentThread().getName() + \\" I\'m done : \\" + i);\\r\\n            if (i < 5) {\\r\\n                Assert.assertEquals(prefix + \\"1\\",  Thread.currentThread().getName());\\r\\n            } else {\\r\\n                Assert.assertEquals(prefix + \\"2\\", Thread.currentThread().getName());\\r\\n            }\\r\\n\\r\\n        }));\\r\\n        threadPool.shutdown();\\r\\n        threadPool.awaitTermination(1, TimeUnit.HOURS);\\r\\n        // \u672c\u6765\u662f\u901a\u8fc7test 1 \u7ebf\u7a0b\u6267\u884c\u7684, \u540e\u9762\u51fa\u73b0\u5f02\u5e38 \u786e\u662ftest2 \u6267\u884c\u7684, \u8bf4\u660ex\u7ebf\u7a0b\u5df2\u7ecf\u7ec8\u6b622, \u5e76\u4e14\u91cd\u65b0\u521b\u5efa\u7ebf\u7a0b\\r\\n    }\\r\\n```\\r\\n```\\r\\n// \u7ebf\u7a0b\u540d\u79f0\u6ca1\u6709\u53d8, \u8bf4\u660e\u5df2\u7ecf\u5e2e\u4f60\u6355\u83b7\u5f02\u5e38.\\r\\nString prefix = \\"test\\";\\r\\n        ExecutorService threadPool = Executors.newFixedThreadPool(1, new ThreadUtil.ThreadFactoryImpl(prefix));\\r\\n        List<Future> futures = new ArrayList<>();\\r\\n        IntStream.rangeClosed(1, 10).forEach(i -> futures.add(threadPool.submit(() -> {\\r\\n            if (i == 5) {\\r\\n                throw new RuntimeException(\\"error\\");\\r\\n            }\\r\\n            log.info(\\"I\'m done : {}\\", i);\\r\\n//            if (i < 5) Assert.assertEquals(prefix + \\"1\\", Thread.currentThread().getName());\\r\\n//            else Assert.assertEquals(prefix + \\"2\\", Thread.currentThread().getName());\\r\\n        })));\\r\\n\\r\\n        for (Future future : futures) {\\r\\n            try {\\r\\n                future.get();\\r\\n            } catch (ExecutionException e) {\\r\\n                log.warn(\\"future ExecutionException\\", e);\\r\\n            }\\r\\n        }\\r\\n        threadPool.shutdown();\\r\\n        threadPool.awaitTermination(1, TimeUnit.HOURS);\\r\\n```\\r\\n####  \u9762\u8bd5\u95ee\u9898\\r\\n1.  \u8bf4\u8bf4\u7ebf\u7a0b\u6c60\u7684\u6838\u5fc3\u53c2\u6570\u6709\u54ea\u4e9b\\r\\n2. \u8bf4\u8bf4\u4f60\u4eec\u7684corePoolSize  \u7684\u6570\u91cf\u662f\u5982\u4f55\u8bbe\u7f6e,\u8d85\u65f6\u65f6\u95f4\u5982\u4f55\u8bbe\u7f6e\\r\\n3. \u4f60\u4eec\u4f7f\u7528\u7684\u662f\u4ec0\u4e48\u961f\u5217,  \u4e3a\u4ec0\u4e48\u4f7f\u7528\u8fd9\u4e2a\u961f\u5217.\\r\\n4. \u4f60\u4eec\u9879\u76ee\u662f\u5982\u4f55\u4f18\u5316\u81ea\u5df1\u7684\u7ebf\u7a0b\u6c60\u53c2\u6570\u7684.\\r\\n5.  \u5f53\u7ebf\u7a0b\u6c60\u8fd8\u6ca1\u8fbe\u5230 corePoolSize \u7684\u65f6\u5019, \u7ebf\u7a0b\u6c60\u91cc\u9762\u6709\u7a7a\u95f2\u7ebf\u7a0b, \u8fd9\u4e2a\u65f6\u5019\u6765\u4e86\u4e00\u4e2a\u65b0\u7684\u4efb\u52a1, \u7ebf\u7a0b\u6c60\u662f\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u8fd8\u662f\u4f7f\u7528\u7a7a\u95f2\u7ebf\u7a0b ?\\r\\n\\r\\n>  \u8def\u8fc7\u70b9\u8d5e, \u6708\u516510w"},{"id":"log4j-print-log","metadata":{"permalink":"/java/log4j-print-log","source":"@site/java/2018-12-01-log4j-print-log.md","title":"log4j\u6253\u5370\u65e5\u5fd7\u7684\u539f\u7406","description":"log4j-slf4j-impl: log4j\u7684\u65e5\u5fd7\u8f6c\u5230slf4j\u4e0a","date":"2018-12-01T00:00:00.000Z","formattedDate":"December 1, 2018","tags":[{"label":"java","permalink":"/java/tags/java"},{"label":"log","permalink":"/java/tags/log"}],"readingTime":1.28,"truncated":false,"authors":[{"name":"jeesk","title":"java engineer","url":"https://shanjiancaofu.com","imageURL":"https://shanjiancaofu.com/img/avtor.png","key":"jeesk"}],"frontMatter":{"slug":"log4j-print-log","title":"log4j\u6253\u5370\u65e5\u5fd7\u7684\u539f\u7406","authors":["jeesk"],"tags":["java","log"]},"prevItem":{"title":"ThreadPoolExecutor\u53c2\u6570\u8be6\u89e3\u548c\u4f18\u5316\u5efa\u8bae","permalink":"/java/java-threadpool-config-opt-adivse"}},"content":"log4j-slf4j-impl: log4j\u7684\u65e5\u5fd7\u8f6c\u5230slf4j\u4e0a\\r\\n\\r\\nLoggerFactory.getLogger () \u65b9\u6cd5 \u5bfb\u627e\u5bf9\u5e94\u7684logger\\r\\n\\r\\norg.slf4j.LoggerFactory#findPossibleStaticLoggerBinderPathSet\\r\\n\u5bfb\u627estaticLoggerBinder\\r\\n\\r\\npaths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);\\r\\n\u901a\u8fc7\u8def\u5f84\u5bfb\u627e\u6240\u6709\u7684binder, \u8fd9\u91cc\u7684STATIC_LOGGER_BINDER_PATH = org/slf4j/impl/StaticLoggerBinder.class, \u6bcf\u4e2aslf4j\u7684\u5177\u4f53\u5b9e\u73b0\u7c7b\u90fd\u6709\u4e00\u4e2aStaticLoggerBinder.class\\r\\n\\r\\norg.slf4j.LoggerFactory#reportMultipleBindingAmbiguity\\r\\n\u5224\u65ad\u662f\u5426\u6709\u591a\u4e2abinder, \u5982\u679c\u6709\u5c06\u4f1a\u6253\u5370\u65e5\u5fd7: SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/Z:/repository/org/slf4j/slf4j-simple/1.7.28/slf4j-simple-1.7.28.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/Z:/repository/org/slf4j/slf4j-nop/1.7.28/slf4j-nop-1.7.28.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.., \u8fd9\u4e2a\u65e5\u5fd7\u662f\u6211\u4eec\u5e38\u89c1\u7684, \u56e0\u4e3a\u6709\u591a\u4e2a\u65e5\u5fd7\u5b9e\u73b0\\r\\n\\r\\norg/slf4j/impl/StaticLoggerBinder.class, \u6bcf\u4e2aslf4j\u7684\u65e5\u5fd7\u5b9e\u73b0\u90fd\u6709\u8fd9\u4e2a\u7c7b\\r\\n\u627e\u5230\u6240\u6709\u7ed1\u5b9a\u7684logger\\r\\n\\r\\n\u8c03\u7528 StaticLoggerBinder.getSingleton();\\r\\n\u8fd9\u91cc\u5982\u679c\u6709\u591a\u4e2aclass, \u5e94\u8be5\u662f\u6309\u987a\u5e8f\u8c03\u7528\u7b2c\u4e00\u4e2aclass\u7684getSingleton(),\\r\\n\u8c03\u7528 reportActualBinding\\r\\n\u6253\u5370\u7ed1\u5b9a\u7684\u662f\u54ea\u4e00\u4e2a\u65e5\u5fd7\u5b9e\u73b0\\r\\nSLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]\\r\\ngetILoggerFactory()\\r\\n\u83b7\u5f97\u5230\u521a\u624dStaticLoggerBinder\u7684\u65e5\u5fd7\u5de5\u5382\\r\\nSimpleLoggerFactory.getLogger\\r\\npublic Logger getLogger(String name) {\\r\\nLogger simpleLogger = (Logger)this.loggerMap.get(name);\\r\\nif (simpleLogger != null) {\\r\\nreturn simpleLogger;\\r\\n} else {\\r\\nLogger newInstance = new SimpleLogger(name);\\r\\nLogger oldInstance = (Logger)this.loggerMap.putIfAbsent(name, newInstance);\\r\\nreturn (Logger)(oldInstance == null ? newInstance : oldInstance);\\r\\n}\\r\\n}\\r\\n\u6307\u5b9a\u7684logger \u4f5c\u7f13\u5b58, \u7136\u540e\u8c03\u7528info() \u65b9\u6cd5\u6253\u5370\u65e5\u5fd7."}]}')}}]);